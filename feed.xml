<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KtorZ&#39;s Blog</title>
    <description>Computer Science and Philosophy</description>
    <link>http://ktorz.github.io/</link>
    <atom:link href="http://ktorz.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 18 Apr 2016 00:27:38 +0200</pubDate>
    <lastBuildDate>Mon, 18 Apr 2016 00:27:38 +0200</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Why Don&#39;t You Use Elm?</title>
        <description>&lt;p&gt;While achieving a small &lt;em&gt;Angular&lt;/em&gt; app today, my thoughts stumbled accross something that piques
curiosity. There’re loads of frontend technologies running currently, and the trendiest one
might be &lt;em&gt;React&lt;/em&gt;. I’ve played rather reasonnably with &lt;em&gt;React&lt;/em&gt; and &lt;em&gt;Backbone&lt;/em&gt;, and I am now
diving seriously into &lt;em&gt;Angular&lt;/em&gt; (you know, one has to make a living). Incidentally, I am a huge
fan of functional reactive programming and &lt;em&gt;Elm&lt;/em&gt; has definitely all my love and devotion. &lt;strong&gt;Why
aren’t more people learning &lt;em&gt;Elm&lt;/em&gt;?&lt;/strong&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;So, let me try to make a point. Each time one learns a new framework, one gets used to the
intrinsic philosophy that this framework builds. &lt;em&gt;React&lt;/em&gt; expects you to understand what
components are and how they behave towards their properties, states and listeners. It also
requires you to have an idea of what is happening at the rendering level with the virtual dom.
&lt;em&gt;Angular&lt;/em&gt; on the other hand presents a slew of services you can inject in your controllers,
factories, directives and how they play well with the two-way data-binding. I won’t carp about
&lt;em&gt;Backbone&lt;/em&gt; because you’ve get the idea. Each framework demands some knowledge, a set of
prerequisite that may echo from one to another but nonetheless stay disparate. Although they
usually rely on strong theoretical concepts, they are often &lt;strong&gt;so deeply entangled in the
framework&lt;/strong&gt; that it is complicated to &lt;strong&gt;use them out of their initial context&lt;/strong&gt;. You’ll get
familiar with the &lt;em&gt;React&lt;/em&gt; way, or the &lt;em&gt;Angular&lt;/em&gt; way yet you’re not likely to re-use their
concepts elsewhere on your own (mainly because you’ll be using another framework and be
compliant with new patterns). Why don’t you learn &lt;em&gt;Elm&lt;/em&gt; instead? Well I know, &lt;em&gt;Elm&lt;/em&gt; is a
different language (and a functional one, yuck!) and the learning curve is way too important.
Meh.&lt;/p&gt;

&lt;p&gt;Therefore, it seems familiar and comfortable, as the big majority of frontend frameworks is
built on top of &lt;em&gt;JavaScript&lt;/em&gt;, to stick with &lt;em&gt;JavaScript&lt;/em&gt; as much as possible. Hence, it feels
like there’s one less barrier to overcome; the underlying language is always the same, isn’t
it? Having a quick look at the &lt;em&gt;JavaScript&lt;/em&gt; in &lt;em&gt;Angular&lt;/em&gt;, and the one in &lt;em&gt;React&lt;/em&gt;, it really
looks like two fairly different flavors of &lt;em&gt;JavaScript&lt;/em&gt;. The former would rather use a
Vanilla/ES5 &lt;em&gt;JavaScript&lt;/em&gt; whereas the latter embraces ES6/ES7 with an extensive usage of
destructuring and methods declaration shortcuts. It really sounds like two different - albeit
from a common ancestor - languages. &lt;strong&gt;You end up learning two distinct languages&lt;/strong&gt;. So what’s
your excuse now?&lt;/p&gt;

&lt;p&gt;Instead of learning a framework (and its underlying &lt;em&gt;JavaScript&lt;/em&gt; flavor), you’re able to deal
with a language which will by itself, intrinsically, offer you &lt;strong&gt;all the control and the
behaviour you’ll expect from a framework&lt;/strong&gt;. Plus, because you are directly facing patterns and
concerns which built your code, you’re getting stronger insights. There’s one remark though.
I’ve been told the main issue with &lt;em&gt;Elm&lt;/em&gt; was about reading the documentation.  For non
functional programming developers, it appears to be an impenetrable dialect whereas
documentations from the trendiest frameworks are more “standard”, more usual.  Inasmuch as it
seems to be the only obstacle that keeps you away from &lt;em&gt;Elm&lt;/em&gt;, let’s spend five more minutes
together to break through this.&lt;/p&gt;

&lt;p&gt;So here we are, talking about &lt;a href=&quot;https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system&quot;&gt;Hindley-Milner&lt;/a&gt; type signatures.  Besides being
present in every functional programming language (like the mighty &lt;em&gt;Haskell&lt;/em&gt; for instance), it
is a powerful way of communicating insights. Trust me on that, once you can read them fluently,
&lt;strong&gt;it becomes the best documentation you’ll ever experience&lt;/strong&gt;. Let’s start with an excerpt of
&lt;em&gt;Elm&lt;/em&gt;’s documentation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First, there’s the function’s identifier &lt;code&gt;isEmpty&lt;/code&gt; that names the signature. Then, we find two
types separated by an arrow. Incidentally, this type system is seemingly relevant because &lt;em&gt;Elm&lt;/em&gt;
is a strongly statically typed language. Although it sounds rather obvious, it is worth a
remark. So, the arrow basically means that given what is on the left side, your function will
give you what is on the right side. In this case, this is straightforward, given a &lt;code&gt;String&lt;/code&gt;,
you’ll get a result of &lt;code&gt;Bool&lt;/code&gt; type. What about several arrows?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, the previous rule still applies. There’re now two different cases though. We either
provide an &lt;code&gt;Int&lt;/code&gt; to the &lt;code&gt;repeat&lt;/code&gt; function, or we provide an &lt;code&gt;Int&lt;/code&gt; and a &lt;code&gt;String&lt;/code&gt; (in that
order). In the second case, we get a &lt;code&gt;String&lt;/code&gt; as a result.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;patate&amp;quot;&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;-- &amp;quot;patatepatate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the first case however, we obtain a function that will, given a &lt;code&gt;String&lt;/code&gt;, return a &lt;code&gt;String&lt;/code&gt;.
Assuming we provided &lt;code&gt;2&lt;/code&gt; as an &lt;code&gt;Int&lt;/code&gt;, then we could write the result the following way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;repeat2&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;repeat2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;repeat2&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;patate&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- &amp;quot;patatepatate&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Can you feel &lt;strong&gt;the expressiveness&lt;/strong&gt; of the type system? Brace yourself, there’s more. Try to get
this one by yourself:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At first sight, this signature looks quite unusal. There’s a new type &lt;code&gt;List&lt;/code&gt; but, with a
&lt;em&gt;parametric&lt;/em&gt; type-variable &lt;code&gt;a&lt;/code&gt;. Should you haven’t guess it, this signifies that your &lt;code&gt;List&lt;/code&gt;
holds… something, something of type &lt;code&gt;a&lt;/code&gt;. It could be an &lt;code&gt;Int&lt;/code&gt;, it could be a &lt;code&gt;Bool&lt;/code&gt; or it
could be a &lt;code&gt;List Int&lt;/code&gt; as well. It nonetheless ensures that your list is made only from element
of that same type. The eventual meaning of the signature is that given a &lt;code&gt;List&lt;/code&gt; of something,
it will always return an &lt;code&gt;Int&lt;/code&gt;. By the by, this is fair enough as we don’t need to know what
are the types of the elements of the list to know how many of them are in the list, right?  One
more before I let you go code some &lt;em&gt;Elm&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First of all, parentheses indicate here a coupling between variables; they enhance the
readability and give us a tiny hint about the meaning of the whole function. They indicate the
first parameter has to be a function, meaning that &lt;code&gt;(a -&amp;gt; b)&lt;/code&gt; should be provided as a block.
Thus you’ll give a function that takes a type &lt;code&gt;a&lt;/code&gt; and returns a type &lt;code&gt;b&lt;/code&gt;. Moreover, we now have
two different type-variables to identify two (possibly) different types. They don’t have to be
different though, but they &lt;em&gt;might&lt;/em&gt; be. It could be &lt;code&gt;Int -&amp;gt; String&lt;/code&gt;, as well as &lt;code&gt;Bool -&amp;gt; Bool&lt;/code&gt;.
Yet, every &lt;code&gt;a&lt;/code&gt; in the signature has the same type, and every &lt;code&gt;b&lt;/code&gt; is consistent as well. Should
you already be familiar with the &lt;code&gt;map&lt;/code&gt; function in &lt;em&gt;JavaScript&lt;/em&gt;, this is the &lt;em&gt;Elmish&lt;/em&gt; version.
Given a function from type &lt;code&gt;a&lt;/code&gt; to type &lt;code&gt;b&lt;/code&gt; and a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;a&lt;/code&gt;, you get a mapped &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;b&lt;/code&gt;.
For instance in &lt;em&gt;JavaScript&lt;/em&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;patate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;autruche&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [6, 8]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the equivalent in &lt;em&gt;Elm&lt;/em&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;patate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;autruche&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- [6, 8]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are some more theory and syntax properties about &lt;em&gt;Hindley-Milner&lt;/em&gt; signatures, however
this is what is needed to cover almost all &lt;em&gt;Elm&lt;/em&gt; signatures you’ll find in packages.
Understanding these signatures gives you access to a whole new part of the documentation. In
the same time, it even allows you to reason about your code and to build your application quite
easily. So, what are you waiting for? There’re few dependencies, it’s blazingly fast, built for
frontend developers, and it’s free from any framework shackles. &lt;strong&gt;Elm really focuses on frontend
developers needs&lt;/strong&gt; in such a way that the gap between your experience and functional
programming is much smaller. Lot of frameworks today seemingly borrow &lt;em&gt;Elm&lt;/em&gt; core concepts on
which they based their architecture (&lt;em&gt;Cycle&lt;/em&gt; and &lt;em&gt;React&lt;/em&gt;+&lt;em&gt;Redux&lt;/em&gt; are good examples of that).&lt;/p&gt;

&lt;p&gt;Now, &lt;strong&gt;&lt;a href=&quot;http://elm-lang.org/try&quot;&gt;go learn some &lt;em&gt;Elm&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;. And for the most curious, &lt;a href=&quot;https://www.youtube.com/watch?v=oYk8CKH7OhE&quot;&gt;Evan Czaplicki&lt;/a&gt; about &lt;em&gt;Elm&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Many thanks to &lt;a href=&quot;http://blog.romainpellerin.eu/&quot;&gt;Romain Pellerin&lt;/a&gt;, &lt;a href=&quot;http://soreine.github.io/&quot;&gt;Nicolas Gaborit&lt;/a&gt; &amp;amp; Matthieu Pizenberg for
the proof-reading and advice.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Fri, 08 Apr 2016 00:10:47 +0200</pubDate>
        <link>http://ktorz.github.io/2016/04/08/why_don't_you_use_elm/</link>
        <guid isPermaLink="true">http://ktorz.github.io/2016/04/08/why_don't_you_use_elm/</guid>
        
        
      </item>
    
      <item>
        <title>So You Want to Build a Distributed Network for IoT?</title>
        <description>&lt;p&gt;In this article, I’ll go through the past 4 months with The Things Network. It aims at giving
technical and non-technical insights on the project for an external enthusiast or someone
willing to catch-up with the work that has already been done.&lt;/p&gt;

&lt;h2 id=&quot;overview-of-the-things-network&quot;&gt;Overview of The Things Network&lt;/h2&gt;

&lt;h3 id=&quot;what-is-iot&quot;&gt;What is IoT?&lt;/h3&gt;

&lt;p&gt;The Internet of Things, a.k.a &lt;em&gt;IoT&lt;/em&gt;, describes the network made by connected objects. In
opposition to the Internet which describes the network of computers (on a very large scale - a
&lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;Raspberry Pi&lt;/a&gt; could be here considered as a computer). Connected objects could be
any &lt;em&gt;things&lt;/em&gt; such as vehicles, a fridge or your cat (please don’t do that). So far, the idea of
a network loosely refers to an abstraction of our vocabulary. There’s actually no such thing as
&lt;em&gt;another&lt;/em&gt; network; under the bonnet, everything still relies on the mighty Internet. One rather
calls IoT the extension created by all those devices. I believe nonetheless in the possibility
of an alternative network, dedicated to the &lt;em&gt;things&lt;/em&gt;. Almost 50 years after &lt;a href=&quot;https://en.wikipedia.org/wiki/ARPANET&quot;&gt;ARPANET&lt;/a&gt;
(the most relevant ancestor of the Internet), it is still unusual to consider making two
distant machines communicate with anything else than the standard &lt;code&gt;tcp/ip&lt;/code&gt; stack alongside with
&lt;code&gt;dns&lt;/code&gt;. Yet, researchers and engineers are &lt;a href=&quot;https://www.micrium.com/iot/internet-protocols/&quot;&gt;already looking forward to build a new
stack&lt;/a&gt; which could manage traffic more efficiently regarding to &lt;em&gt;things&lt;/em&gt;. Aiming at
the same direction, The Things Network (hereby known as TTN) strives to build a network for
&lt;em&gt;IoT&lt;/em&gt;.  Even though it still relies on the standard Internet stack, promises are good enough to
foresee an evolution towards a parallel and independent dedicated network.&lt;/p&gt;

&lt;h3 id=&quot;ttn&quot;&gt;TTN&lt;/h3&gt;

&lt;p&gt;One does not simply talk about TTN without mentioning &lt;a href=&quot;https://www.lora-alliance.org/What-Is-LoRa/Technology&quot;&gt;LoRa&lt;/a&gt;. Straightforwardly, &lt;em&gt;LoRa&lt;/em&gt;
stands for &lt;strong&gt;Lo&lt;/strong&gt;ng &lt;strong&gt;Ra&lt;/strong&gt;nge. It is a low-energy modulation technique for radio signals. It is
thereby a core technology on which relies The Things Network. Basically, a slew of
&lt;strong&gt;end-devices&lt;/strong&gt; can emit signal on a radio frequency using the LoRa modulation in order to be
picked up by one or several &lt;strong&gt;Gateway(s)&lt;/strong&gt;. Therefore, it enables a huge area to be covered by
a tiny amount of gateways and in the meanwhile, it enables the network to spread across the
world. Let’s paint a big picture of the network architecture and for that, we’ll consider
several top-level components with which the reader (you) may want to become familiar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/ttn/overview.png&quot; alt=&quot;overview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To avoid any ambiguity in the document, I’ll consider (and I expect the reader to also consider
it) &lt;em&gt;the network&lt;/em&gt; to be the combination of &lt;strong&gt;router(s)&lt;/strong&gt; + &lt;strong&gt;broker(s)&lt;/strong&gt; + &lt;strong&gt;handler(s)&lt;/strong&gt; –
handlers are not, properly said, part of the network, but stand more like bridges between the
network and application. Yet, to keep the discussion simple enough, we’ll consider them as part
of it.  Therefore, the following document describes The Things Network’s Architecture version 1
which aims at being a scalable, low-latency, distributed and reliable implementation of
&lt;a href=&quot;https://www.lora-alliance.org/portals/0/specs/LoRaWAN%20Specification%201R0.pdf&quot;&gt;LoRaWAN&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;lorawan-principles&quot;&gt;LoRaWAN principles&lt;/h4&gt;

&lt;p&gt;Before diving a bit more into technical concerns, we need to understand a bit some core
concepts of the LoRaWAN protocol. I will save you the time of reading the 82 pages of
specifications (I am pretty sure you know better ways to spend your Saturday). Let’s get some
directly some insights without scratching too much the surface of it though.&lt;/p&gt;

&lt;h5 id=&quot;frames--messages&quot;&gt;Frames &amp;amp; Messages&lt;/h5&gt;

&lt;p&gt;Packets (or datagrams) flow throughout the network. They carry a payload surrounded by
additional pieces of information that are used to conduct this payload from a node to its final
recipient. Because payload is a rather general term to describe something carried by an
encompassing structure, in LoRaWAN, we called the end payload a &lt;em&gt;frame payload&lt;/em&gt;. The network’s
role is to make sure that a message received by a gateway arrives, in time, to an application.
Because LoRaWAN also allows applications to reply, the network should handle messages from
applications to devices. A message going from an end-device towards the application is called
an &lt;em&gt;uplink&lt;/em&gt; message. The reply is intuitively named a &lt;em&gt;downlink&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Besides, messages are encoded, encrypted with a specific key known by the end-devices itself
and the application to which it belongs. Providing keys to a device is called &lt;em&gt;activation&lt;/em&gt; and
LoRaWAN specifies two different ways to eventually provide those keys: the Activation By
Personalization (ABP) and the Over-The-Air Activation (OTAA).&lt;/p&gt;

&lt;h5 id=&quot;abp&quot;&gt;ABP&lt;/h5&gt;

&lt;p&gt;The ABP means that a device owns its own keys, since the beginning. They are attached to it and
are not configured in any manners. Then, on another level, applications may keep track of
which of their devices is associated to which keys.&lt;/p&gt;

&lt;h5 id=&quot;otaa&quot;&gt;OTAA&lt;/h5&gt;

&lt;p&gt;The OTAA is a bit smarter than the ABP. Instead of holding fixed keys, devices hold the logic
that allows them to generate them alongside the network. Devices may exchange special messages
with the network to establish those keys. The network thereby becomes a mediator between
devices and applications in order to set up the initial configuration. The idea behind OTAA is
quite powerful. It allows devices to roam easily between different networks and still be able
to reach their associated application.&lt;/p&gt;

&lt;h4 id=&quot;node&quot;&gt;Node&lt;/h4&gt;
&lt;p&gt;Nodes or end-devices refer to one end of the chain. End-devices emit signals using LoRa
modulation and frequency range towards Gateways. They are split into 3 classes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;: Cannot receive any data from the network unless they’ve initiated the communication&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;B&lt;/strong&gt;: Can receive data from the network at precisely scheduled windows (Beacons)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;: Can receive data at any time from the network&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Incidentally, class A requires less power than B which requires less power than C.
An end-device participating in a LoRaWAN network, has a device address and a secret
device-specific application session key and network session key.
These values are either assigned by the Network or self-defined.&lt;/p&gt;

&lt;p&gt;These specifications primarily focus on the class A. Future network versions will implement
mechanisms to handle class B and class C but they are irrelevant with the current document.&lt;/p&gt;

&lt;h4 id=&quot;gateway&quot;&gt;Gateway&lt;/h4&gt;
&lt;p&gt;Gateways might be seen as a way to transform multiple messages emitters into one much more
demanding emitter. Therefore, a Gateway gathers LoRa signals coming from a
bunch of near end-devices. A given end-device does not need to know the nearest gateways, nor it
has to communicate with a specific one - signals are simply broadcast into the wild open.&lt;/p&gt;

&lt;p&gt;Gateways receive signals which reach them, and forward all received messages to a dedicated Router. The
Data could be either a sensor result or a specific network command such as a connection
request. A Gateway actually sends incoming packets to a router after having wrapped each of them
into a json structure holding meta-data about the Gateway itself (such as Gateway’s
identifier, a timestamp and GPS coordinates if available). Note that a Gateway will forward
packets from all LoRA Nodes in its vicinity, even if a Node is not part of the Things Network.&lt;/p&gt;

&lt;p&gt;Gateways can also emit packets coming from the network toward a Node using the LoRa technology.
In fact, Gateways are in charge of taking care of emission at a scheduled time defined by the
network meaning that the network is able to send packets to Gateways at any moment, regardless
of their emission time.&lt;/p&gt;

&lt;h4 id=&quot;router&quot;&gt;Router&lt;/h4&gt;

&lt;p&gt;Routers are entry points of the network from the Nodes perspective. Packets transmitted by Nodes are
forwarded to specific Routers from one or several Gateways. The Router then forwards those packets
to one or several Brokers. The communication is bi-directional: Routers may also
transfer packets from Broker to Gateways.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/ttn/uplink_router.png&quot; alt=&quot;Uplink forwarding&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;broker--network-server&quot;&gt;Broker &amp;amp; Network Server&lt;/h4&gt;

&lt;p&gt;Brokers have a global vision of a network’s part. They are in charge of several nodes, meaning
that they will handle packets coming from those nodes (thereby, they are able to tell to
Routers if they can handle a given packet). Several Routers may send packets coming from the
same end-device (shared by several segments / Gateways), all duplicates are processed by the
Broker and are sent to a corresponding Handler.&lt;/p&gt;

&lt;p&gt;A Broker is thereby able to check the integrity of a received packet and is closely
communicating with a Network Server in order to administer the related end-device. For a
reference of magnitude, Brokers are designed to be in charge of a whole country or region (if
the region has enough activity to deserve a dedicated Broker). Note that while brokers are able
to verify the integrity of the packet (and therefore the identity of the end device), they are
not able to read application data.&lt;/p&gt;

&lt;p&gt;Network servers are processing &lt;a href=&quot;https://en.wikipedia.org/wiki/Media_access_control&quot;&gt;MAC&lt;/a&gt; commands emitted by end-devices as well as taking care
of the data rates and the frequency of the end-devices. Network Servers would emit commands to
optimize the network by adjusting end-devices data rates / frequencies unless the node is
requesting to keep its configuration as is.&lt;/p&gt;

&lt;p&gt;For the moment, a single Network Server will be associated for each Broker. No communication
mechanisms between Network Servers is planned for the first version. Also, it won’t be possible
for a Broker to query another Network Server than the one it has been assigned to. Those
features might be part of a second version. This implies a Broker and a Network Server are, for
an external observer, a seemingly unique component. From then on, I’ll consider both of them
when referring to a broker.&lt;/p&gt;

&lt;h4 id=&quot;handler&quot;&gt;Handler&lt;/h4&gt;

&lt;p&gt;Handlers materialize the entry point to the network for Applications. They are secure
referees which encode and decode data coming from applications before transmitting them to a
Broker of the network. Therefore, they are in charge of handling secret applications keys and
only communicate an application id to Brokers as well as specific network session keys for each
node (described in further sections). This way, the whole chain is able to forward a packet to
the corresponding Handler without having any information about either the recipient (but a
meaningless id) or the content.&lt;/p&gt;

&lt;p&gt;Because a given Handler is able to decrypt the data payload of a given packet, it could also
implement mechanisms such as geolocation and send to the corresponding application some
interesting meta-data alongside the data payload. Incidentally, a handler can only decrypt
payload for packets related to applications registered to that handler. The handler is managing
several secret application session keys and it uses these to encrypt and decrypt corresponding
packet payloads.&lt;/p&gt;

&lt;p&gt;A Handler could be either part of an application or a standalone trusty server on which
applications may register. The Things Network will provide Handlers as part of the whole network
but - and this is true for any component - anyone could create its own implementation as long
as it is compliant with TTN’s architecture.&lt;/p&gt;

&lt;h4 id=&quot;application&quot;&gt;Application&lt;/h4&gt;

&lt;p&gt;An Application is the owner of an end device in the LoRaWAN model. Applications run outside the
Things Network core and interact with it via a handler.  As such, applications are responsible
for registering their devices with the network via a handler. If not, the device will not be
able to join The Things Network.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/ttn/uplink_broker.png&quot; alt=&quot;Uplink to application&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;implementations-remarks&quot;&gt;Implementations remarks&lt;/h2&gt;

&lt;p&gt;Before diving into the actual logic implemented in the core components, I want to express some
thoughts about subsidiary details on the implementation. The network is a distributed,
multi-threaded, low-latency and reliable software, and this implies some extra work to wire up
all the different parts such that it seems to make no difference from within the components
themselves.  Actually, routers don’t care at all about where are located brokers: Should it be
the same machine, in the same thread, it won’t make any difference.  Also, all components
assumed a concurrent environment; they are intended to be used concurrently, and they seemingly
expect their dependencies not to flinch when used concurrently.&lt;/p&gt;

&lt;h3 id=&quot;communication-between-services&quot;&gt;Communication between services&lt;/h3&gt;

&lt;p&gt;From an external observer, the network is a big black box with merely two entry points
(considering only the main, expected and required features; there’s actually more should one
looks at monitoring and meta-information access).&lt;/p&gt;

&lt;p&gt;The first set of entry points is at the bottom of the network: routers. Each router is
listening for &lt;code&gt;udp&lt;/code&gt; connections on a given port. Most gateways currently being used forward
packets (partially) accordingly to the &lt;a href=&quot;https://github.com/TheThingsNetwork/ttn/blob/develop/documents/protocols/semtech.pdf&quot;&gt;Semtech protocol&lt;/a&gt; which unfortunately
relies on &lt;code&gt;udp&lt;/code&gt;. We’ll discuss later on what is already planned to replace the current protocol.
Therefore, messages can be sent to the network through those &lt;code&gt;udp&lt;/code&gt; connections. Eventually,
they may be forwarded to applications.&lt;/p&gt;

&lt;p&gt;On the other hand, the network, as we provide it currently, enables communications directly
with handlers. The need of registering devices (for either ABP or OTAA) drives the construction
of an API for the handler such that it gives users/developers a bit of control on their
nodes among the network. Because we want the communication to be as fast as possible when it
comes to nodes, most communications coming from applications are buffered and kept for later
use. Thereby, when it comes to register a device, the application let the network knows the
target, and the registration, stored, remains in stand-by until the related device shows
itself. The devices are, most of the time, the trigger which starts a set of operations within
the network. By the way, the communication between applications and TTN handlers is based on
&lt;code&gt;rpc&lt;/code&gt; over &lt;code&gt;tcp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/ttn/services_1.png&quot; alt=&quot;TTN Protocols - 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One might object the use of&lt;code&gt;rpc&lt;/code&gt; between applications and handlers: even though it is a seemly
lightweight protocol, it requires an extra effort to set up as well as being quite unusual for
web developers. Nevertheless, it also glues the core components of the network, and was
therefore a natural choice for us. Moreover, we’re also looking forward to getting rid of &lt;code&gt;udp&lt;/code&gt;
between gateway and router, and a solution based on &lt;code&gt;rpc&lt;/code&gt; could definitely enhance the
consistency and robustness of the whole infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/ttn/services_2.png&quot; alt=&quot;TTN Protocols - 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I should also point out that the use of &lt;code&gt;rpc&lt;/code&gt; makes the scattering in micro-services fairly
easy. Thereby, all components are arranged in small and isolated micro-services with a tight
link to others. From a daemon perspective, it holds a direct reference to another local object
on which it might directly and synchronously call methods. Under the hood, each component only
holds a stub (a client) which presents the same interface as an external &lt;code&gt;rpc&lt;/code&gt; server,
listening for &lt;code&gt;tcp&lt;/code&gt; requests from other dependent micro-services. One would say the stub is a
kind of magic component which interacts with an external server by serializing the request,
unserializing the response, and taking care of handling connection establishments and
revocations whereas all of this is actually provided by the combination of &lt;a href=&quot;http://www.grpc.io/&quot;&gt;grpc&lt;/a&gt; and
&lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot;&gt;protocol buffers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/ttn/services_3.png&quot; alt=&quot;TTN Protocols - 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As I am writing these words, we’re using the version 3 of the &lt;em&gt;proto&lt;/em&gt; language which is still
in a beta version of development. Although we’re not making any use of new features introduced in
this major, we still want to look forward to possible evolutions; being already compatible with
the newest available version makes that move quite logical. Plus, it allows us to optimize the
speed and the efficiency of the serialization/unserialization process thanks to
&lt;a href=&quot;http://gogo.github.io/doc/&quot;&gt;gogoprotobuf&lt;/a&gt; which provides an incredible set of features on top of &lt;em&gt;proto 3&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Besides, while I discussed about the entry points and internal communication in the network, I
forgot to mention the network outputs. For those, because we’re likely to find a highly
demanding traffic for which a reply is needed within a really short time frame; we cannot expect
and require a proportional level of availability from an application. For those reasons, using
a publish/subscribe pattern is well indicated. The network can publish regardless of
applications states while the latter can process messages at their own pace. &lt;em&gt;mqtt&lt;/em&gt; is a strong
and reliable protocol which is designed to connect multiple subscribers and publishers
altogether.&lt;/p&gt;

&lt;p&gt;So, we end up with a bunch of micro-services, with which you can interact through &lt;code&gt;rpc&lt;/code&gt; over
&lt;code&gt;tcp&lt;/code&gt; and &lt;code&gt;udp&lt;/code&gt; (and hopefully soon only over &lt;code&gt;tcp&lt;/code&gt;) and which spit out data in &lt;code&gt;mqtt&lt;/code&gt; queues.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/ttn/services_4.png&quot; alt=&quot;TTN Protocols - 4&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;concurrent-programming&quot;&gt;Concurrent programming&lt;/h3&gt;

&lt;p&gt;I mentioned above that the application was a multi-threaded software. Since we’re considering
a &lt;em&gt;Go&lt;/em&gt; context within which several &lt;a href=&quot;http://blog.nindalf.com/how-goroutines-work&quot;&gt;goroutines&lt;/a&gt; live, I would rather talk about a
concurrent application. We’ve just seen that TTN is split into several micro-services which
behave as independent workers with well defined entry and output paths. Yet, this only
reflects the &lt;em&gt;distributed&lt;/em&gt; facet of the infrastructure. Each worker actually divides its
workload into concurrent and parallel goroutines. It allows multiple requests to be handled
simultaneously and also gives us a bit of robustness (a single request might fail and panic
without any impact on other requests). Parallelism is not magic though. When it comes to
computers, at the very end of the chain, one is just switching a bit from 1 to 0 or 0 to 1; and
this cannot be done simultaneously by two different processes, goroutines, threads or whatever
they’re called. At some point, one needs to wait and to queue up.&lt;/p&gt;

&lt;p&gt;How do we handle parallelism in TTN? Firstly: immutability. Secondly: immutability. And thirdly
… well, immutability? When one looks at patterns used to manage concurrent processes in a
program that might run in parallel, it always ends up to the same idea of &lt;em&gt;critical zones&lt;/em&gt;.
There’s no way to ensure that a memory space won’t be accessed simultaneously unless you make
sure that only one actor can operate on it at a time. This is particularly mandatory when you
consider both readings from and writings into that memory space (there’s no issue at all to
simultaneously read the same space; it gets more annoying when one’s trying to change what
another one is trying to read). Thereby, you either create an artificial safe zone (using
semaphores or monitors, we’ll come to that in a minute), or, you simply avoid having shared
memory spaces.&lt;/p&gt;

&lt;p&gt;If you take a quick look at TTN code base, a lot of effort has been done to avoid those
pitfalls. Almost all objects that can be instantiated are stateless components. They do not
hold any internal state; they do not mutate themselves throughout their life cycle. There’s a
huge difference between those two samples:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stateless&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stateless&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Compute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// whatever&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stateful&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Stateful&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Compute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// whatever&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first one can safely be ran in parallel whereas the latter one needs additional internal
protections such as &lt;code&gt;mutex&lt;/code&gt;. Therefore, objects in TTN are divided in two categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Operational objects&lt;/strong&gt;: they gather a set of methods under a same label; they are also possibly
(and are most of time) composed of other operational objects. They do not carry any data or
states except for configuration parameters which &lt;strong&gt;don’t change over time&lt;/strong&gt; and
are not intended to change &lt;strong&gt;ever&lt;/strong&gt;. They assume to be safely used concurrently and
simultaneously without any issue.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Data objects&lt;/strong&gt;: they offer a handy way to aggregate a set of related data that can be
manipulated by foreign methods. They do not declare any method except
serialization and unserialization methods (marshalling and unmarshalling in the &lt;em&gt;Go&lt;/em&gt;
vocabulary) that are only used to persist those objects or to send them along remotely.
&lt;strong&gt;They’re not intended to be shared by concurrent processes&lt;/strong&gt; but are merely a way to
friendly pass several parameters to a local (or remote) function within the same execution
scope of the calling process itself.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By doing this, we ensure that any operational object can be manipulated simultaneously without
the need of setting up a dedicated, restricted concurrent area. As long as they do not mutate
any internal state, they might safely be called by thousand actors at the same time. The call
itself carries all the data needed and the response illustrates the mutations operated on the
inputs. Several consecutive calls with the same inputs lead to the same outputs. There’s no
mutation going on and the code is even stronger.&lt;/p&gt;

&lt;p&gt;Notwithstanding this approach, there are still some cases where it is sometimes needed to
operate mutations on an allocated memory space. &lt;em&gt;Go&lt;/em&gt; isn’t a functional programming language,
hence, it doesn’t offer mechanisms to totally get rid of those mutations (or more exactly,
sometimes, it doesn’t fit well to its philosophy). Besides, there’s one adage is &lt;em&gt;Go&lt;/em&gt; that says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Do not communicate by sharing memory; instead, share memory by communicating.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Having this in mind, I find that &lt;strong&gt;monitors&lt;/strong&gt; suit well in the &lt;em&gt;Go&lt;/em&gt; paradigm. Monitors describe
a nice pattern to isolate a mutable piece of data from concurrent accesses by offering a façade
which can be safely accessed simultaneously and which takes care of distributing manipulations
of the underlying data it protects. Basically, in &lt;em&gt;Go&lt;/em&gt;, it can be implemented really easily
using &lt;a href=&quot;https://gobyexample.com/channels&quot;&gt;channels&lt;/a&gt; and function &lt;a href=&quot;https://gobyexample.com/closures&quot;&gt;closures&lt;/a&gt;. It goes like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;iota&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Sub&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;chorder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;chorder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Increase&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;chorder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Decrease&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chorder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Variable being monitored&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chorder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s only one goroutine that can access and mutate the &lt;code&gt;counter&lt;/code&gt; variable, all other
goroutines (the original caller or another subsidiary goroutine, it doesn’t matter) can then
safely require mutation by sending orders through the channel. This works well only because
channels are concurrent-safe in &lt;em&gt;Go&lt;/em&gt; by design. The channel can be accessed by many goroutines,
there’s still one single agent that is having control over the variable. The same solution can
be implemented with &lt;code&gt;mutex&lt;/code&gt; as well (which I find most of the time a bit more inelegant).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Monitor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Mutex&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Monitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Monitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;monitor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Monitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Choosing one or another is a matter of context. Sometimes, channels make the monitoring really
flexible and scalable whereas some other times, mutex just makes it easy to write and to
reuse. In the former, the way of communicating is being shared. In the later, that’s the whole
data under protection that has to be shared. I would rather go for the solution based on
channels as I find it less error-prone and quite effortless to reason about: the data is only
manipulated by one agent which is just processing orders sequentially whenever it can. By the
way, by using buffered channels, it can also be made completely asynchronous.&lt;/p&gt;

&lt;h3 id=&quot;in-memory-storage&quot;&gt;In-memory storage&lt;/h3&gt;

&lt;p&gt;If it wasn’t clear enough, we’re going to explore the four points I stated in introduction of
this section. Should you have followed it correctly, we primarly talked about the &lt;em&gt;distributed&lt;/em&gt;
aspect of TTN before dealing with the &lt;em&gt;concurrent&lt;/em&gt; one. Let’s now glance at the &lt;em&gt;low-latency&lt;/em&gt;
facet of it. The network, as specified by LoRaWAN should process a message within a short time
frame. Technically, LoRaWAN allows the network to configure the frame’s size but let’s assume a
default configuration setup and consider that we have to process a packet (ideally) within a
second. The processing is distributed among several agents and it already takes time to
transfer data from one to another. Incidentally, all those agents also have to persist pieces
of information and get them back when times arrive.&lt;/p&gt;

&lt;p&gt;It feels rather natural to guarantee a high availability on each storage. Furthermore, the
network doesn’t have a complicated and evolved database scheme. What is needed is merely a map
which links a given key to one or several entries. Deploying an &lt;code&gt;sql&lt;/code&gt; server would be effective
yet not efficient. Even though solutions like &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; or &lt;a href=&quot;http://leveldb.org/&quot;&gt;levelDB&lt;/a&gt; grasped our
interest at first (they are tried and tested in-memory databases), we eventually turn towards
&lt;a href=&quot;https://github.com/boltdb/bolt&quot;&gt;boltDB&lt;/a&gt; which is a robust &lt;em&gt;Go&lt;/em&gt; in-memory storage. Three essential reasons drive that
choice:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Bolt’s design is extremely simple: it maps keys (raw sequence of bytes) to values (raw
sequence of bytes as well).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Despite its relatively poor performances for writing, Bolt is fast enough for reading. The
network experiences way more lookups than updates, hence Bolt.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bolt is written in &lt;em&gt;Go&lt;/em&gt; and offers a wonderful &lt;em&gt;Go&lt;/em&gt; library, completely effortless for us to
use.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/ttn/chart_db.png&quot; alt=&quot;In-memory backend performances comparison&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s still one downside about using Bolt. We cannot (at least directly) manipulate the
storage from a cluster of components. For instance, this entails one router is bound to one
database. Should we want to deploy a cluster of routers behind a balancer which all share the 
same storage, we need to build all the necessary mechanisms on top of Bolt (mechanisms that are
already included in tools like Redis). 
There’s nevertheless nothing wrong in evolving from Bolt to something else. One can even plug
an extra backend manager like &lt;a href=&quot;http://ledisdb.com/&quot;&gt;LedisDB&lt;/a&gt; which would extend Bolt’s functionality to
enable a distributed processing through cluster. Moving from Bolt to Redis is also a realistic
option.&lt;/p&gt;

&lt;h3 id=&quot;testing-strategy&quot;&gt;Testing strategy&lt;/h3&gt;

&lt;p&gt;I remember when I first heard about interfaces in &lt;em&gt;OO&lt;/em&gt;, it sounded extremely weird to me. Then
one day, I tried to test a piece of software and all of a sudden I realized for what interfaces
were useful. By the by, almost everything in &lt;em&gt;Go&lt;/em&gt; is about interacting with interfaces. They
are implicitely implemented in the language and rather straightforward to declare. Once the
code is built with them, it becomes a deeply and easily testable application, mostly because
one is able to mock real entities with something on which the tester has a huge control. I
previously explained how components (or operational objects) were solely composed of other
operational objects though I didn’t mentioned that all dependencies were injected during the
component instantiation such that it’s seemingly possible to declare a component full of fake
internal components.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Actual interface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyInterface&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;MyMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arg1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arg2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Mock type&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MockMyInterface&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;InMyMethod&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Arg1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Arg2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;OutMyMethod&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// MyMethod implements the MyInterface interface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MockMyInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arg1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arg2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;InMyMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Arg1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arg1&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;InMyMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Arg2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arg2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OutMyMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OutMyMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Error&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We consistently adopt the same strategy for each entity. We want to be able to drive each
component the way we want: make them return a specific value or make them fail on demand.
Sometimes, knowing the callee’s arguments is worth it. The snippet above shows how every mock
has been implemented and the general principle behind them. During testing, it’s then
under the tester responsability to provide the desired output to analyse the behaviour of the
tested component.&lt;/p&gt;

&lt;p&gt;While looking at the mock’s structure, it seems rather obvious that the whole code could be
generated. Interfaces are likely to evolve over time and even though it does’t require a lot of
time to write or rewrite all corresponding mock interfaces, it’s still constitute time and
effort that could be put into something else. Plus, once a generator has been proven, it saves
a lot of unit tests and globally enhance the reliability of the application by removing codes.
The least code one writes, the least bugs one’s likely to introduce.&lt;/p&gt;

&lt;p&gt;In the same idea, all the code needed to serialize and unserialize objects is remarkably
similar. Moreover, it constitutes a critical part of the software: it needs to run quickly. To
avoid repetitions, one is likely lured into a nice design which uses composition and / or
inheritance patterns albeit this has a significant impact on performances. Another approach is
to simply avoid writing this kind of code, and have it generated by a trusted library (so is
&lt;em&gt;protobuf&lt;/em&gt;). As a result, a lot of code in TTN is automatically generated. I see this as a mark
of reliability. It’s less code to write, less code to maintain and less code to test. All of
this makes us really focus on the core logic during testing. The next diagram gives an order of
magnitude of the code’s distribution, might it be generated or manually written.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/ttn/code_distribution.png&quot; alt=&quot;Code Distribution&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;components-implementation&quot;&gt;Components implementation&lt;/h2&gt;

&lt;p&gt;In this section, I want to explore of what the network core logic is really made. This implies
to take each component and to look under the hood. During the introduction, I gave a general
overview of the whole architecture. The next lines aim more at describing technically the
implementation and the solutions adopted.&lt;/p&gt;

&lt;h3 id=&quot;semtech-adapter&quot;&gt;Semtech Adapter&lt;/h3&gt;
&lt;p&gt;The network starts with the Semtech adapter which receive and process &lt;code&gt;udp&lt;/code&gt; datagrams sent by
gateways. As it was stated above, the Router is merely an &lt;code&gt;rpc&lt;/code&gt; server and thus, listens to
&lt;code&gt;tcp&lt;/code&gt; requests using an appropriate transport scheme and protocol. This adapter stands as a
bridge between the external world and the network. Indeed, we have less control on the
protocols defined in gateways’ firmware than on the network itself. The Semtech adapter enables
a clear separation between the network core logic and the gateways such that we can totally
change gateways protocol without any impact on the internal business logic.&lt;/p&gt;

&lt;p&gt;Therefore, it abstracts the Semtech protocol by taking care of replying accordingly to uplink
datagrams: should you glance at the semtech protocol, you’ll notice that it defines a mechanism
to keep a connection open (by nature, &lt;code&gt;udp&lt;/code&gt; connections are not kept open and because routers
might not be able to contact gateways directly, the connection needs to stay available during
the whole communication). Those details have nothing to do with the network itself and
shouldn’t be considired in the router. What really matters for the router are the actual uplink
data or join-request, out of any &lt;code&gt;udp&lt;/code&gt; context. The Semtech adapter is precisely playing that
role, making sure the router is bothered only by actual TTN packets.&lt;/p&gt;

&lt;p&gt;Looking at the code, we can split it in three global parts. First of all, the &lt;code&gt;udp&lt;/code&gt; server
itself: the adapter plays the role of a server, listening to a specific port on which gateways
can establish connections and send datagrams.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;netAddr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UDPConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 1. Read from connection&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 1.1 In case of error, try to reconnect (exponential backoff-like algorithm)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UDPConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 2.1 Unmarshal Semtech packet&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 2.2 Update connections pool&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 2.3 Handle packet as PULL_DATA or PUSH_DATA&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, we handle packets as they arrive using five different methods. The first two methods use
they three other to carry their tasks. In fact, an incoming uplink datagrams might contain more
than one payload meaning that a single transfer between a gateway and a router is likely to
lead to several uplink network packets (possibly of different natures). To make it clear, all
calls have just been distributed among the following methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;handlePushData()&lt;/strong&gt;: Processes a Semtech datagram and call &lt;strong&gt;handleUp&lt;/strong&gt; for each rxpk
packets carried by the Semtech datagram&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;handlePullData()&lt;/strong&gt;: Acknowledges a Semtech &lt;code&gt;PULL_DATA&lt;/code&gt; datagram&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;handleUp()&lt;/strong&gt;: Processes an actual network packet which could be either a
confirmed/unconfirmed data or a join request.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;handleDataDown()&lt;/strong&gt;: Analyses an &lt;strong&gt;handleUp&lt;/strong&gt; response in case where the packet carried an
uplink data&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;handleJoinAccept()&lt;/strong&gt;: Analyses an &lt;strong&gt;handleUp&lt;/strong&gt; response in case where the packet carried a
join request.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a result, those methods wire up Semtech datagrams to the network. They eventually use
conversion method which interpret either a rxpk Semtech packet and translate it to a
corresponding network packet, or in the othr way around, interpret a network packet and
translate it to a txpk packet. 
We thereby defined two methods &lt;strong&gt;toLoRaWANPayload&lt;/strong&gt; and &lt;strong&gt;newTXPK&lt;/strong&gt; to operate the wiring.
Because each packet comes alongside some metadata, one also needs to transfer and convert
metadata. Those pieces of information evolve with the development and thus, we need reflection
to read from and insert into the corresponding source / target. The Semtech package uses
pointer fields to make a difference between zero-typed fields and undefined types (because in
&lt;em&gt;Go&lt;/em&gt;, any variable is initialized with its default zero-value which makes impossible to know
whether a variable refers to an uninitialized data). Nevertheless, using &lt;code&gt;gRPC&lt;/code&gt; forces all
internal metadata to be plain types (no pointer here). Field names are aslo not likely to match
albeit they are rather similar. We deal with this concern by using &lt;em&gt;Go&lt;/em&gt;
&lt;a href=&quot;https://golang.org/pkg/reflect/#StructTag&quot;&gt;struct-tags&lt;/a&gt;.  Hence, for instance, to inject metadata from a network packet to a
txpk packet, we use the following small though not straightforward piece of code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;injectMetadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xpk&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ValueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ValueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xpk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NumField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;full&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FieldByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IsValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AssignableTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xpk&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;router-1&quot;&gt;Router&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/ttn/router.png&quot; alt=&quot;Router illustrated&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The router’s role is fondamentally what we could expect from a load-balancer. It redirects the
traffic to the appropriate recipient. At this stage, the network merely knows the device
address associated to the packet (which is likely to conflict with another address). In the
meanwhile, routers also monitor gateways: they process status packet from gateways and keep
track of the time-on-air spent by each transmitter. They distill these pieces of information and
communicate only the bare minimum to the rest of the chain.&lt;/p&gt;

&lt;p&gt;A router is split into three main parts that are quite close. They actually have been separated
to enhance readibility and clarity. Here’s what it looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HandleStats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 1. Validate request&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 2. Update gateway statistics&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HandleJoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 1. Validate request&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 2. Add gateways statistics to request&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 3. Broadcast the request&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 4. Update gateway statistics&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 5. Forward response to semtech adapter&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HandleData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 1. Validate request&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 2. Add gateways statistics to request&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 3. Lookup known brokers for corresponding device address&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 4. Forward (if some brokers has been found) or broadcast the request&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 5. In case of broadcasting, store any broker that acknowledges the request&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 6. Update gateway statistics&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 7. Forward the response, if any, to semtech adapter&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The router is really straightforward. Its implementation has been kept short and simple. Almost
all the logic has been put in the &lt;em&gt;duty cycle Manager&lt;/em&gt; and in the &lt;em&gt;Broker&lt;/em&gt; such that we consider
the router only as a transition component which filters and redirects incoming messages.&lt;/p&gt;

&lt;h3 id=&quot;duty-cycle-manager&quot;&gt;Duty cycle manager&lt;/h3&gt;
&lt;p&gt;Because of band usage regulation per region (US, Europe, China …), the network has to monitor
its outputs to make sure that the different transmitters don’t exceed limits defined by the
authorities. The duty cycle manager precisely serves this purpose. It keeps track of
transmitters and give an indication of a sub-band usage over time.&lt;/p&gt;

&lt;p&gt;Before any further computation, the managers expects to be configured with a set of sub-bands
and a corresponding set of maximum duty cycles. Then, given a frequency in &lt;code&gt;MHz&lt;/code&gt;, a payload size
in number of bytes a data rate identifier and coding rate identifier, it can compute the
time-on-air required to transfer a message.&lt;/p&gt;

&lt;p&gt;By the by, the duty cycle is a ratio which illustrates, for a given logical signal, whether the
signal is up or down. For instance, a duty cycle of &lt;code&gt;0.5&lt;/code&gt; indicates that 50% of the time, the
signal is up (or down, as you wish). This implies an idea of time or more exactly, an idea of
duration. What is actually computed by the manager is a duty cycle throughout a fixed interval
of time (the duty cycle is therefore an average duty cycle over that interval). As soon as one
considers a fixed interval, then, given a maximum duty cycle, one can compute the amount of time
allocated for that period.&lt;/p&gt;

&lt;p&gt;Considering an interval of one hour, with a maximum duty cycle of &lt;code&gt;1%&lt;/code&gt;, we end up with &lt;code&gt;36s&lt;/code&gt; of
availability each hour. If a transmitter reaches this limit in its first ten minutes, it
would wait for fifty minutes before being allowed to transmit again. Limitations vary with the
considered sub-band, and sub-bands vary with the world region in which the transmitter is
located.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/ttn/dutycycle.png&quot; alt=&quot;duty cycles illustrated&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For a given transmitter, the manager indicates the transmitter usage with a percentage
(ideally, a number between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;100&lt;/code&gt;, seldom above &lt;code&gt;100&lt;/code&gt; should the transmitter breaks the
limit). Because we don’t really need that granularity yet, we only consider four different
states for transmitter on a given sub-band:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Blocked:&lt;/strong&gt; usage is greater or equal to 100&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Critical:&lt;/strong&gt; usage is above 85 but still lower than 100&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Available:&lt;/strong&gt; usage is between 30 and 85&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Highly available:&lt;/strong&gt; usage is lower than 30&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using these states, a signal noise ratio, and a signal strength, it is possible to compute a
score for a given transmission. In a practical use case, a node emits a message on a frequency;
that message might be caught by several gateways which will all forward the signal to the
routers to which they are connected. At some point, all the messages get dispatched to one
single handler. As a consequence, to each message is associated a given transmitter (gateway),
and only one of them shall be used for a hypothetical reply. In practice, the handler uses the
duty cycle manager to compute a score based on each message’s metadata. The priority is given to
the transmitter state, then to the signal noise ratio and finally to the signal strength. The
heuristic is extremely simple and is just used to sort transmitters at different stages, using
those criteria.&lt;/p&gt;

&lt;h3 id=&quot;broker&quot;&gt;Broker&lt;/h3&gt;
&lt;p&gt;Similarly to how the router is designed, the TTN broker is merely a &lt;code&gt;tcp&lt;/code&gt; server (or more
exactly, two &lt;code&gt;tcp&lt;/code&gt; servers running side-by-side; this allows a decoupling between network and
monitoring communications). It offers two remote methods to handle data uplinks and join
requests. In addition, the broker also manages applications and, for this purpose, relies on
oAuth 2.0 protocol. Indeed, the broker might receive orders from an application (a handler
being used to mediate the transmission) for which it would expect an identification token to be
sent alongside. The broker is eventually linked to an in-memory local storage in which it can
store information about applications and running end-devices.&lt;/p&gt;

&lt;p&gt;The broker handles data and join-request in a similar fashion, considering the following
pseudo-code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HandleData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 1. Validate request&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 2. Retrieve associated entries, if any&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 3.1 Evaluate frame counter as a 16-bit counter&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 3.2 Check MIC&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 3.2.1 If MIC fails, evaluate frame counter as a 32-bit counter and check again&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 3.3 If MIC check succeed, consider this entry and move along&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 4. Update the frame counter associated to the device found&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 5. Forward the request to the corresponding handler&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 6. Analyze the response; if any, set the MIC and forward it to the router&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HandleJoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 1. Validate request&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 2. Retrieve previously used devNonce&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 3. Check whether the devNonce has already been used&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 4. Forward the request to the appropriated handler&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 5. Analyze the response; if any, store the session keys and the devNonce used&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next to that, the broker is also used as a remote authority to control management operation on
devices and applications. Each broker is able to verify the legitimacy of a request which
provides a bearer token. As a matter of fact, the broker is in tight communication with a token
provider, the same one that authenticates a user of an application by providing a valid token.
Although applications don’t interact directly with brokers, they can emit request through a
handler which will forward them on their behalf to an associated broker. The scheme is merely a
close loop of communication where at the end, the broker ends up asking the token provider
whether a user request shall be granted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/ttn/broker.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;handler-1&quot;&gt;Handler&lt;/h3&gt;
&lt;p&gt;Last component properly said of the network infrastructure, the handler is responsible for
making the life of applications easier. It should be clear though that many 
implementations of handlers might exist, I am going to argue about the “official” one TTN
provides as an illustration of &lt;em&gt;what could be&lt;/em&gt; a handler. Again, handlers simplify
applications’ job yet the latter are likely to have different needs. We’ll hereby call handler
the TTN handler in the next lines.&lt;/p&gt;

&lt;p&gt;The handler is a rather complicated set of intrinsic communications. It has indeed to buffer
and temporize the processing of packets. All packets are forwaded and carried by other network
components but because several gateways might transfer a received datagram originally, we need
to catch them all and deduplicate the whole bundle in the handler. To carry out such a task, it
defines two internal sub-processes &lt;strong&gt;consumeSet&lt;/strong&gt; (C1) and &lt;strong&gt;consumeBundles&lt;/strong&gt; (C2) which runs
independently in their own goroutine. The former actually buffer an incoming packet into a
queue and set an alarm since the first reception. The latter is triggered once a set of packets
is ready to be processed (meaning, once the alarm previously set rang). Most of the business
logic is located in the &lt;strong&gt;consumeBundles&lt;/strong&gt; process in charge of deduplicating the request and
publishing the result.&lt;/p&gt;

&lt;p&gt;The handler also defines, like other core components, &lt;code&gt;rpc&lt;/code&gt; methods intended to be called
remotely. These methods work in pair with the two sub-processes which, by taking advantage of
&lt;em&gt;Go&lt;/em&gt; channels’ nature, enables a synchronous and quite straightforward operation. For instance:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HandleDataUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 1. Validate request&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 2. Retrieve device data from AppEUI + DevEUI&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 3. Wrap packet into a &amp;quot;bundle&amp;quot; and set a new uplink entry&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 4. Wait for the bundle to be processed&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 5. If any, forward the response to the broker &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What is called &lt;em&gt;bundle&lt;/em&gt; is actually a super-set of an uplink packet (or similarly, a
join-request). As well as holding the packet itself and a unique identifier, the bundle also
carries a channel that should be used to reply to the routine that is processing the uplink
(and this is incidentally where the &lt;strong&gt;HandleDataUp&lt;/strong&gt; and &lt;strong&gt;HandleJoin&lt;/strong&gt; magically become
synchronous methods).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/articles/ttn/handler.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For class A devices, LoRaWAN also allows the application to reply to an uplink. However,
carrying a datagram from a gateway up to the application already requires time. Moreover, if a
downlink has to be sent, it should be within a second (considering one started to count since a
datagram reaches a gateway), or maybe two seconds should we target the second response window.
That’s a short time frame, and applications aren’t likely to provide such a level of
availability. In order to cope with this issue, we allow applications to “schedule” downlink for
a specific device. Indeed, one can push a perishable packet into a queue. When appropriated,
the handler might grab one from the queue and use it as the response’s frame payload. Beside, in
case where no packet has been scheduled but a response is nonetheless needed (most likely because
the uplink packet was a &lt;em&gt;Confirmed Data Up&lt;/em&gt;), the handler will generate a response carrying an
empty frame payload.&lt;/p&gt;

&lt;p&gt;By the by, the handler is also in charge of encrypting and decrypting either frame payloads or
join-accept responses. It is incidentally holding application private keys and is able to (has
to) generate new session keys on each join-request. By dealing with these tasks, the handler
becomes a rather complicated component: loads of operations require access to session keys
hence being the only bearer necessarily empowers it as well as makes it a major point of
business logic. Although it was originally designed to serve applications with a low coupling
to the network, the handler has become an important piece of software on which key elements now
rely. We’re looking forward to moving as much logic as possible in the broker and the router.
This way, the broker would remain the only heavy component of the network.&lt;/p&gt;

&lt;h3 id=&quot;mqtt-adapter&quot;&gt;MQTT Adapter&lt;/h3&gt;

&lt;p&gt;Last piece of the network, the &lt;code&gt;mqtt&lt;/code&gt; adapter has a similar role to the semtech adapter
previously presented. It enables the communication between the network and an &lt;code&gt;mqtt&lt;/code&gt; broker in
such a way that it is transparent for the network. Again, we’re here using &lt;code&gt;rpc&lt;/code&gt; to deal with
this problem. I’ll not dive into the &lt;code&gt;mqtt&lt;/code&gt; protocol; it wouldn’t be relevant at all. The
adapter is straightforward and merely describe two remote methods &lt;code&gt;HandleData&lt;/code&gt; and
&lt;code&gt;HandleJoin&lt;/code&gt;. Under the hood, it’s just a way for the handler to publish messages on &lt;code&gt;mqtt&lt;/code&gt;
topics without having to deal with the topics itself.&lt;/p&gt;

&lt;h2 id=&quot;looking-ahead&quot;&gt;Looking ahead&lt;/h2&gt;

&lt;p&gt;The network is still in its early stages. We’re now on the verge of opening the staging
environment to the wild world. It doesn’t contain all the expected features though. Some work
is still required to handle &lt;code&gt;mac&lt;/code&gt; commands as defined in LoRaWAN. Also, as we built the
network, we noticed issues and improvement that could be made on the original architecture. Our
mission is now to make it easy to use and safe for users and developers. We’re thereby striving
to provide as many services as we can while in the meanwhile, we work hard on improving the
quality of the existing network. In the nineties, they were building the Internet. Now, we put
all out efforts into building the Internet Of Things.&lt;/p&gt;

</description>
        <pubDate>Thu, 24 Mar 2016 17:33:59 +0100</pubDate>
        <link>http://ktorz.github.io/2016/03/24/so_you_want_to_build_a_distributed_network_for_iot/</link>
        <guid isPermaLink="true">http://ktorz.github.io/2016/03/24/so_you_want_to_build_a_distributed_network_for_iot/</guid>
        
        
      </item>
    
      <item>
        <title>Alloy Binding: Unveil The Mysteries</title>
        <description>&lt;p&gt;Despite some reservations about several Alloy features and choices, one does not simply ignore 
the most interesting feature so-called data-binding. Unfortunately, the documentation on that
part is rather disastrous; let’s try to provide some insights upon which rely in the future.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Because the binding mainly concerns &lt;em&gt;Backbone&lt;/em&gt; models (we’ll see more about how we can trick
the current implementation), we’ll proceed first with model and then we’ll look at how to
extend the concept to collections. Incidentally, data-binding can be used within a widget and
within the widget’s scope. We’ll consider Alloy’s version &amp;gt; 1.6 all along this post.&lt;/p&gt;

&lt;p&gt;I do not intend to give an explanation of what data-binding is, I assume the reader already
knows the idea. This is rather a practical guide on how to use it wihtin Alloy. You should be
able to use the binding on any Alloy tag, please let me know if you know any issue with a
component.&lt;/p&gt;

&lt;h2 id=&quot;model-binding&quot;&gt;Model binding&lt;/h2&gt;

&lt;h3 id=&quot;global-instance&quot;&gt;Global instance&lt;/h3&gt;

&lt;p&gt;When using an explicit tag &lt;code&gt;&amp;lt;Model&amp;gt;&lt;/code&gt; in an &lt;em&gt;xml&lt;/em&gt; view, Alloy will assume you’re refering to a
unique singleton stored in &lt;code&gt;Alloy.Models.&amp;lt;model_name&amp;gt;&lt;/code&gt;. Should Alloy creates a new instance the
first time you refer to that model. Otherwise, the same instance will be used.&lt;/p&gt;

&lt;p&gt;So, here we are:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Alloy&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Model&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;patate&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{patate.size}&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Alloy&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The snippet below will create a binding between a model instance stored in
&lt;code&gt;Alloy.Models.patate&lt;/code&gt;. The following rules apply here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alloy will create an instance of the model if it does not exist&lt;/li&gt;
  &lt;li&gt;A model file has to be present in the &lt;code&gt;models/&lt;/code&gt; folder&lt;/li&gt;
  &lt;li&gt;The model file should have the same name as indicated in &lt;code&gt;src&lt;/code&gt; plus a &lt;code&gt;.js&lt;/code&gt; extension&lt;/li&gt;
  &lt;li&gt;Alloy will listen to &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;change&lt;/code&gt; and &lt;code&gt;destroy&lt;/code&gt; events from Backbone&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;destroy()&lt;/code&gt; method has to be called explicitely to unbind the model&lt;/li&gt;
  &lt;li&gt;The model can define a &lt;code&gt;transform()&lt;/code&gt; method which return an object on which properties
are going to be accessed&lt;/li&gt;
  &lt;li&gt;Without any &lt;code&gt;transform()&lt;/code&gt; method, Alloy will consider the &lt;code&gt;toJSON()&lt;/code&gt; method provided by
Backbone for each model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Incidentally, if there is already an existing instance, we can just omit the &lt;code&gt;&amp;lt;Model&amp;gt;&lt;/code&gt; tag and
directely refer to the model via string interpolation. To me, it makes more sense to create the
singleton in a separated file, for instance &lt;code&gt;Alloy.js&lt;/code&gt; and keep away from the view file that
ugly &lt;code&gt;&amp;lt;Model&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you try to reference a non-existing model, alloy will refuse to compile with a nice error
message if you provide an invalid &lt;code&gt;src&lt;/code&gt; attribute or, with a message a bit more irrelevant if
you just specified an invalid base for the interpolation. In both cases, this just mean that
you should only bind to existing model.&lt;/p&gt;

&lt;h3 id=&quot;local-instance&quot;&gt;Local instance&lt;/h3&gt;

&lt;p&gt;What if you just need a local instance of your model? Well, there are some attributes you may
add to the &lt;code&gt;&amp;lt;Model&amp;gt;&lt;/code&gt; to do so.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Alloy&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Model&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;patate&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;instance=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mypatate&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{$.mypatate.size}&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Alloy&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice the &lt;code&gt;$.patate&lt;/code&gt; now in the interpolation and the two new attributes in the model tag.&lt;/p&gt;

&lt;p&gt;Each previous rules also apply in that case. The only difference is that, instead of storing
and trying to access the model instance from &lt;code&gt;Alloy.Models&lt;/code&gt;, this will rather place the
instance within your controller instance and thus, give you access through &lt;code&gt;$.&amp;lt;model_id&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unlike the global instance, you cannot omit the &lt;code&gt;&amp;lt;Model&amp;gt;&lt;/code&gt; tag, nor the &lt;code&gt;id&lt;/code&gt; attributes. Without
any &lt;code&gt;id&lt;/code&gt;, the instance will be stored in your controller under a name computed by the compiler,
hard to guess at runtime for you. And, without any tag, the model just won’t be created and
you’ll end up with a nice error when Alloy will try to bind Backbone event on an undefined
instance when executing the controller. You cannot bind to an existing instance doing that.&lt;/p&gt;

&lt;p&gt;By the by, &lt;code&gt;instance&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; are inseparable. There is no point of considering one without
the other.&lt;/p&gt;

&lt;h3 id=&quot;existing-instance&quot;&gt;Existing instance&lt;/h3&gt;

&lt;p&gt;Well, sometimes, you still want to bind to an existing instance. Did I say this was impossible?
That wasn’t exactly true. From the mysterious valleys of Alloy source code, you can notice that
Alloy actually processes your controller arguments and has a dedicated processing for several of
them. The &lt;code&gt;$model&lt;/code&gt; is one of them.&lt;/p&gt;

&lt;p&gt;Thus, from a view file, you can interpolate the following way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Alloy&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{size}&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Alloy&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This syntax assumes that an argument &lt;code&gt;$model&lt;/code&gt; (no point) has been passed to your controller
with one condition. It should be an object with a property &lt;code&gt;__transform&lt;/code&gt; which should also
point to an object, empty or not. Because Alloy will try to access this property directly, if
you omit it, the application will crash at runtime. By the by, this object does have to be a
Backbone model, yet merely an object which defines a &lt;em&gt;__transform&lt;/em&gt; attribute.&lt;/p&gt;

&lt;p&gt;You can see the &lt;code&gt;__transform&lt;/code&gt; property as the result of either the &lt;code&gt;transform()&lt;/code&gt; or the
&lt;code&gt;toJSON()&lt;/code&gt; methods we mentionned above. You can populate this object with properties that need
to be accessed (&lt;code&gt;size&lt;/code&gt; in our example). Besides, if the property is undefined within the
&lt;code&gt;__transform&lt;/code&gt; object, Alloy will presume that &lt;code&gt;$model&lt;/code&gt; is a Backbone instance and will try to
access the property via &lt;code&gt;$model.get(&#39;&amp;lt;property_name&amp;gt;&#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;remarks&quot;&gt;Remarks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Beware of caps&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use a capitalized name for your model, use the downcase name when refering to it in the
interpolation. Alloy stores models names as lower cases.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Alloy&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Model&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Patate&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{patate.size}&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Alloy&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Don’t nest properties&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your model holds an object, you won’t be able to access its nested properties when
interpolating. Thus, take advantage of the &lt;code&gt;transform()&lt;/code&gt; method or &lt;code&gt;__transform&lt;/code&gt; object to
provide a facade for those properties.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Several interpolations with toJSON()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you &lt;strong&gt;don’t&lt;/strong&gt; define a &lt;code&gt;transform()&lt;/code&gt; method, you can take advantage of Backbone templates
and use several interpolation tags in a same string. This won’t compile nevertheless if you’re
using the &lt;code&gt;$model&lt;/code&gt; trick, and won’t work as expected if &lt;code&gt;transform()&lt;/code&gt; is defined (in that case,
only the first interpolation will be rendered).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Alloy&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{patate.greetings}: {patate.size}cm&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Alloy&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Already hydrated models&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep in mind that the view associated to your model will only render and re-render when a
&lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;change&lt;/code&gt; or &lt;code&gt;destroy&lt;/code&gt; event occurs. This means that if you try to bind a view to an
already instantiated model that already possesses its data, you won’t see the view as expected.
If you’re in such a case, &lt;code&gt;&amp;lt;your-model&amp;gt;.trigger(&#39;change&#39;)&lt;/code&gt; will do the trick.&lt;/p&gt;

&lt;h2 id=&quot;collection-binding&quot;&gt;Collection binding&lt;/h2&gt;

&lt;p&gt;Let’s step up the game a bit. One model wasn’t enough, we want a complete collection of them.
The idea is quite similar than before should we just add one concept. Each model of the
collection are going to be rendered within a container. It feels natural to use containers such
as &lt;code&gt;listview&lt;/code&gt; or &lt;code&gt;tableview&lt;/code&gt; however, one can use any view object as a container (again, let me
know if you encounter any issue with a given UI object).&lt;/p&gt;

&lt;p&gt;Thus, given a container which will hold the collection, we need to defined a nested repeater
which will be used to instantiate all children view elements associated to each model of the
collection.  The nested repeater element depends of the nature of the container. The table in
the current documentation is quite accurate though still a bit incomplete. In practice, it is
possible to use &lt;code&gt;ScrollView&lt;/code&gt; and in fact, any other &lt;code&gt;View&lt;/code&gt; (or component extending &lt;code&gt;View&lt;/code&gt;) as a
container and then use any UI component that extends &lt;code&gt;View&lt;/code&gt; as a repeater (&lt;code&gt;ImageView&lt;/code&gt; for
instance).&lt;/p&gt;

&lt;h3 id=&quot;global-instance-1&quot;&gt;Global Instance&lt;/h3&gt;

&lt;p&gt;In the same manner as for models you may use a &lt;code&gt;Collection&lt;/code&gt; markup tag to create a global collection
instance of an existing model (the name you supply should exist within your &lt;code&gt;models&lt;/code&gt; folder).
The instance is stored under &lt;code&gt;Alloy.Collections&lt;/code&gt; meaning that, the same instance will be used
between several controllers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Alloy&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Collection&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;patate&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;View&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dataCollection=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;patate&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{size}&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/View&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Alloy&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can omit the &lt;code&gt;Collection&lt;/code&gt; tag as well and this supposes that there is an existing instance
stored in &lt;code&gt;Alloy.Collections&lt;/code&gt;. Incidentally, doing that, you’re able to give any name you want
to the collection, it does not have to fit an existing model of your &lt;code&gt;models&lt;/code&gt; folder. This is
quite interesting if you want to keep different collections holding the same type of models.&lt;/p&gt;

&lt;p&gt;Notice how we identified the container component with the &lt;code&gt;dataCollection&lt;/code&gt; attribute. A
collection holder which as been tagged like this can also define 3 other attributes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;dataFunction&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This property allows you to create an alias accessible within your controller to render the view
on demand. This is useful when you’re binding to an already populated collection; By using the
provided function, you can render the data even if no Backbone event has been raised. You
don’t need the trick mentionned in the model section, here’s a dedicated function.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;dataFunction&lt;/code&gt; is quite straightforward:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;view.xml&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Alloy&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;View&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dataCollection=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;patate&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dataFunction=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;render&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{size}&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/View&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Alloy&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;controller.js&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Some code above &lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Will behave the same as receiving a watched Backbone event on the collection &lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Some code after&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;dataFilter&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You have the possibility to filter the given collection to only render a part of that
collection. This is done by providing a filtering function via the &lt;code&gt;dataFilter&lt;/code&gt; attribute. The
function takes a collection as an argument and is expecting to return an array of models.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;view.xml&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Alloy&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;View&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dataCollection=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;patate&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dataFilter=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;filter&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{size}&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/View&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Alloy&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;controller.js&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Only patate with a size &amp;gt; 10&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Incidentally, this is quite useful to render different parts of the screen with data extracted
from solely one collection.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;dataTransform&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember the &lt;code&gt;transform()&lt;/code&gt; method we could define on models ? Well, it doesn’t apply
automatically to model inside a collection. Still, you can apply some transformations to your
models by providing an appropriate function via the &lt;code&gt;dataTransform&lt;/code&gt; property. The function will
run for each model stored in the collection and should return a JSON representation of that
model.  The most convenient way to use it is probably to take advantage of the &lt;code&gt;transform()&lt;/code&gt;
method already defined for the associated model which could be done in either one of the
following ways:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;view.xml&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Alloy&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;View&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dataCollection=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;patate&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dataTransform=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{size}&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/View&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Alloy&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;controller.js&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Or&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;alloy/models/&amp;lt;Model&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;local-instance-1&quot;&gt;Local instance&lt;/h3&gt;

&lt;p&gt;I won’t spend a lot of time on that part. This is highly similar to what is done with models.
You can add an &lt;code&gt;id&lt;/code&gt; and a &lt;code&gt;instance&lt;/code&gt; attributes to the &lt;code&gt;Collection&lt;/code&gt; tag to create a local
instance of the given collection. The collection is thereby stored under &lt;code&gt;$.&amp;lt;id&amp;gt;&lt;/code&gt; and respect
all previously written rules about collections.&lt;/p&gt;

&lt;h3 id=&quot;remarks-1&quot;&gt;Remarks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;destroy()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember, you still have to call &lt;code&gt;$.destroy()&lt;/code&gt; once done to remove all bindings that apply on
collections. Without this, the garbage collector won’t be able to free the memory after the
controller life.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Already populated collection&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This remark is identical to the one about models. Your collection will only be rendered if
Backbone trigger one the listened events (&lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;destroy&lt;/code&gt;, &lt;code&gt;change&lt;/code&gt;, &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt; or
&lt;code&gt;reset&lt;/code&gt;)  unless you made an explicit call to the function aliased by &lt;code&gt;dataFunction&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Widgets&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Widgets work merely the same way as Controllers. One can thereby use binding features within a
widget with those subtle differences:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Model and Collection instances are stored under &lt;code&gt;Widget.&amp;lt;Models|Collections&amp;gt;.&amp;lt;id&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;You can use any model defined at your application level but you may also define your own
private  models in the widget’s folder&lt;/li&gt;
  &lt;li&gt;You cannot omit the &lt;code&gt;&amp;lt;Model&amp;gt;&lt;/code&gt; tag and access a model stored in &lt;code&gt;Widget.Models&lt;/code&gt; this way.&lt;/li&gt;
  &lt;li&gt;You cannot access models via a global instance.  You need to specify an &lt;code&gt;id&lt;/code&gt; and
&lt;code&gt;instance&lt;/code&gt; for every &lt;code&gt;Model&lt;/code&gt; tag.&lt;/li&gt;
  &lt;li&gt;You can specify any model name to the &lt;code&gt;src&lt;/code&gt; attribute (even one that does not reflect an
existing model).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I guess this is it. Enjoy the inconsistency!&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Dec 2015 16:14:52 +0100</pubDate>
        <link>http://ktorz.github.io/2015/12/16/alloy_binding_unveil_the_mysteries/</link>
        <guid isPermaLink="true">http://ktorz.github.io/2015/12/16/alloy_binding_unveil_the_mysteries/</guid>
        
        
      </item>
    
      <item>
        <title>How to Git?</title>
        <description>&lt;p&gt;Another cookbook about git. I hereby expose some recipes I encounter quite often. This post is
likely to evolve in the future and to be completed on purpose.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;How to…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#change-the-last-commit&quot;&gt;change the last commit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#change-the-last-commit-message&quot;&gt;change the last commit message&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rebase-and-preserve-commit-dates&quot;&gt;rebase and preserve commit dates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#make-an-empty-commit&quot;&gt;make an empty commit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#change-messages-of-a-set-of-commits&quot;&gt;change messages of a set of commits&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#change-the-commit-date-of-an-old-commit&quot;&gt;change the commit date of an old commit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#import-only-a-subdirectory-of-an-existing-repository&quot;&gt;import only a subdirectory of an existing repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#excludes-some-files-by-default-always&quot;&gt;excludes some files by default, always&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#show-all-commits-related-to-a-specific-file&quot;&gt;show all commits related to a specific file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#make-git-cli-get-rid-of-small-typos&quot;&gt;make git cli get rid of small typos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#create-a-new-detached-branch&quot;&gt;create a new detached branch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#temporary-ignore-files&quot;&gt;temporary ignore files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;last changes: 01-02-2016&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;recipes&quot;&gt;Recipes&lt;/h2&gt;

&lt;h3 id=&quot;change-the-last-commit&quot;&gt;… change the last commit&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add ...
git commit --amend -C HEAD&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Incidentally, &lt;code&gt;-C&lt;/code&gt; option (as well as &lt;code&gt;-c&lt;/code&gt; that also let you edit the message) can be used to
re-use any any commit’s message you wish. By giving it &lt;code&gt;HEAD&lt;/code&gt;, we just ask for the last one.&lt;/p&gt;

&lt;h4 id=&quot;change-the-last-commit-message&quot;&gt;… change the last commit message&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;whatever&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
git commit --amend -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;whatever&amp;gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;rebase-and-preserve-commit-dates&quot;&gt;… rebase and preserve commit dates&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git rebase --onto &amp;lt;newbase&amp;gt; &amp;lt;branch&amp;gt; &amp;lt;upstream&amp;gt;
git rebase --committer-date-is-author-date &amp;lt;newbase&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By default, a &lt;code&gt;git rebase&lt;/code&gt; does not overwrite the author dates. Thus, after having perform the
rebase, one can still ask git to rewrite all commit dates and make them match their author&lt;/p&gt;

&lt;h3 id=&quot;make-an-empty-commit&quot;&gt;… make an empty commit&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git commit --allow-empty -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;whatever&amp;gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;change-messages-of-a-set-of-commits&quot;&gt;… change messages of a set of commits&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git filter-branch --msg-filter &lt;span class=&quot;s1&quot;&gt;&amp;#39;echo &amp;quot;&amp;lt;whatever&amp;gt; $(cat)&amp;quot;&amp;#39;&lt;/span&gt; &amp;lt;branch&amp;gt;...&amp;lt;REF_LIMIT&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, &lt;code&gt;$(cat)&lt;/code&gt; prints the previous commit message such that we can append or prepend elements
to that message. Also, by default (without &lt;code&gt;&amp;lt;branch&amp;gt;...&amp;lt;REF_LIMIT&amp;gt;&lt;/code&gt;), the transformation will
apply to the entire branch. By specifying a &lt;code&gt;REF_LIMIT&lt;/code&gt;, which is a commit ref, it is possible
to stop the process on that specified commit (exclusive, the &lt;code&gt;REF_LIMIT&lt;/code&gt; isn’t affected).&lt;/p&gt;

&lt;h3 id=&quot;change-the-commit-date-of-an-old-commit&quot;&gt;… change the commit date of an old commit&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git filter-branch --env-filter &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;#39;if [ $GIT_COMMIT = &amp;lt;whatever_commit_hash&amp;gt; ]&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt; then&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt; export GIT_AUTHOR_DATE=&amp;lt;whatever_date&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt; export GIT_COMMITTER_DATE=&amp;lt;whatever_date&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt; fi&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Git supports several date format, for instance: &lt;code&gt;dd.mm.aaaaThh:mm&lt;/code&gt; is one of them and is
seemingly handy.&lt;/p&gt;

&lt;h3 id=&quot;import-only-a-subdirectory-of-an-existing-repository&quot;&gt;… import only a subdirectory of an existing repository&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git config core.sparsecheckout &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;whatever/subdirectory &amp;gt;&amp;gt; .git/info/sparse-checkout
git fetch &amp;lt;whatever-remote&amp;gt;
git &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt;-tree -mu &amp;lt;whatever-remote&amp;gt;/&amp;lt;whatever-branch&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;excludes-some-files-by-default-always&quot;&gt;… excludes some files by default, always&lt;/h3&gt;

&lt;p&gt;Create a global &lt;code&gt;.gitignore&lt;/code&gt;, somewhere in a safe and soft place:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.gitignore&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;.DS_Store
Thumbs.db

&lt;span class=&quot;c&quot;&gt;### Vim ###&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;._&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;*.s&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;a-w&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;a-z&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;._&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;a-w&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;a-z&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
*.un~
Session.vim
.netrwhist
*~&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And, either modify your &lt;code&gt;.gitconfig&lt;/code&gt; if any, or use the CLI directly:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git config --global core.excludesfile&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/.gitignore&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Files such as buffers created by vim shouldn’t be present in a project &lt;code&gt;.gitignore&lt;/code&gt;. This
should semantically be related to the project itself, not to the tools or IDE one’s using.&lt;/p&gt;

&lt;h3 id=&quot;show-all-commits-related-to-a-specific-file&quot;&gt;… show all commits related to a specific file&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git log --follow &amp;lt;whatever-file&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;-p&lt;/code&gt; option might be added to also show the content of each commit and to thereby give an
overview of all changes that lead to the current file content.&lt;/p&gt;

&lt;h3 id=&quot;make-git-cli-get-rid-of-small-typos&quot;&gt;… make git cli get rid of small typos&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git config --global help.autocorrect&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Simple, efficient, clean.&lt;/p&gt;

&lt;h3 id=&quot;create-a-new-detached-branch&quot;&gt;… create a new detached branch&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout --orphan &amp;lt;whatever-branch&amp;gt;
git reset&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will allow you to start a complete new branch which as to link to another one. A starting
point for the new branch can also be specified alongside the branch’s name.&lt;/p&gt;

&lt;h3 id=&quot;temporary-ignore-files&quot;&gt;… temporary ignore files&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git update-index --assume-unchanged &amp;lt;whatever-file&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And this could be undone with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git update-index --no-assume-unchanged &amp;lt;whatever-file&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Doing this, you can simply ignore changes that occurs on a file stored in the git-index. Why
doing such a thing ? For instance, you’ll have to change the content of a file during a small
dev session (you add some log lines or some other irrelevant content inside) but the real
effort concerns other files in the repo. You still want to commit changes and to operate as
usual, then, you can temporary ignore those files. Also, if you have for instance some
compressed zip files manipulated only by the compiler or any external tools, you may want to
ship only those compressed zip files and not the garbage generated by the tools afterwards.
Then, you can simply ignore changes to those files but still add them (–force) once and assume
them unchanged in the future so that the only version git will care about is the first one you
ever committed. That’s tricky but it sometimes useful.&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Dec 2015 09:53:00 +0100</pubDate>
        <link>http://ktorz.github.io/2015/12/10/how_to_git/</link>
        <guid isPermaLink="true">http://ktorz.github.io/2015/12/10/how_to_git/</guid>
        
        
      </item>
    
      <item>
        <title>REST for Representational State Transfer</title>
        <description>&lt;p&gt;This small article aims at giving a concise idea of what is the essence of a RESTful API and
how to build a stateless one. Incidentally, stateless RESTful API now appears to me as a
tautology: a RESTful API is stateless &lt;strong&gt;by nature&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Even the name would suggest that: &lt;em&gt;state transfer&lt;/em&gt; meaning that REST gives a way of
representing exchanges between a provider and a client where states are included within that
transfer. In other words, this means that the client &lt;strong&gt;should&lt;/strong&gt; take care of any state that
exists (such as a session after an authentication) and has to communicate the necessary pieces
of information during API calls.  That’s why HTTP headers stand for, and this is what I’ll try
to hereby put forward.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;pre-requisite&quot;&gt;Pre-requisite&lt;/h2&gt;
&lt;p&gt;First of all, we assume that any communication between the server and the client are done
through SSL using HTTPS. Thereby, communications are protected against man-in-middle attack and
we can assume that information coming from a client are really coming from a trusty client.&lt;/p&gt;

&lt;p&gt;Also, in order to authenticate, client will have to provide credentials on a given endpoint.
None of those credentials are directly stored in the database. The server would rather store a
hash using a SHA-256 algorithm and a salt, also stored alongside the password. As a matter of
fact no compromising and valuable information should be stored as is in the server. Encryption
algorithms allow a one-way encryption.&lt;/p&gt;

&lt;h2 id=&quot;the-secret-key&quot;&gt;The secret key&lt;/h2&gt;
&lt;p&gt;In order to be stateless, the server has to provide an API that is idempotent and that does not
rely on any kind of session or cookie mechanism. There is no idea of session on the server. The
only thing that is stored is a given secret key known &lt;strong&gt;only&lt;/strong&gt; by the server itself. That key
is a single point of failure meaning that anyone who owns it would be able to replicate the
behavior of the server. However, the only way to get that key is by having direct access on
the server. In such a case, we’re in any scenario completely screwed. Also, The server should
be able to renew this secret key periodically. The previous key has to be kept in memory until
it becomes useless (after a delay greater than the expiration delay of the last created
token; we’ll come to that in a second). This way, attackers trying to identify or guess the
secret key would be short-circuited.&lt;/p&gt;

&lt;p&gt;We assume now that the server is holding a secret key which is at least &lt;code&gt;16 bytes&lt;/code&gt; long and
base64 encoded (just a matter of choice, arbitrary)&lt;/p&gt;

&lt;h2 id=&quot;free-endpoints&quot;&gt;Free endpoints&lt;/h2&gt;
&lt;p&gt;Some endpoints of the application might be accessible for anyone. For instance, an application
could provide the weather to any user willing to retrieve this piece of information. In such a
case, there is no need to check the trustyness of a given client.  One’s making a request on a
given url, one’s getting the corresponding response. This is straightforward and is completely
stateless.&lt;/p&gt;

&lt;h2 id=&quot;restricted-endpoints&quot;&gt;Restricted endpoints&lt;/h2&gt;
&lt;p&gt;The interesting part shows when one deals with restricted endpoints; those that need to be
protected with an authentication process. The main idea emerging with oAuth and oAuth2 is to
give the client a way to present himself as a valid authenticated user. A request to an
authentication endpoint should in exchange of valid credentials returns an encoded token.  That
token should be different for any request and should expire after a given delay (one week, one
day, one month…).&lt;/p&gt;

&lt;p&gt;There are two strategies to communicate a token to the user. The former is what is basically
done with oAuth2 and the latter echoes standards such as &lt;em&gt;JWT&lt;/em&gt;. In both cases, what is given to
the client is nothing more than an expiration date and a user or session id in such a way that
the server will know they are valid.&lt;/p&gt;

&lt;h3 id=&quot;plain-json-response&quot;&gt;Plain JSON response&lt;/h3&gt;

&lt;p&gt;The first strategy consist in returning a plain JSON object defining three attributes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;uid&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;expiration_date&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;token&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;uid&lt;/code&gt; and the &lt;code&gt;expiration_date&lt;/code&gt; are used to describe the authentication. They give a
validity period and the user id who’s initiated the authentication. The &lt;code&gt;token&lt;/code&gt; is an encoded
string composed of that &lt;code&gt;uid&lt;/code&gt; and &lt;code&gt;expiration_date&lt;/code&gt; such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;token = hmac256(uid|expiration_date, secret_key)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That way, when the client needs to request some data from the server, he has to supply the
three pieces of information above. Using those data, the server would try to recover the token
from the &lt;code&gt;uid&lt;/code&gt; and the &lt;code&gt;expiration_date&lt;/code&gt;. If the computed result matches the given &lt;code&gt;token&lt;/code&gt;,
then we can assume that the authentication information is valid.&lt;/p&gt;

&lt;p&gt;In other words, the server is encoding the token using a one-way encryption algorithm
(MAC/Hashed key) with a secret key. It holds that secret key but gives the client the public
informations and the result of the encryption.&lt;/p&gt;

&lt;h3 id=&quot;encryption-and-decryption&quot;&gt;Encryption and Decryption&lt;/h3&gt;

&lt;p&gt;Another strategy would be to use a “two-ways” encryption algorithm (a cipher) such as AES,
meaning that the server will be able to encrypt a given data but also to decrypt the encoded
result to get back the data. In that way, the server can only provide a single encrypted token
with an equivalent form as before:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;token = AES256(uid|expiration_date, secret_key)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client would have to send the token through each request. Receiving the request, the server
would try to decrypt the token and retrieve both the &lt;code&gt;uid&lt;/code&gt; and the &lt;code&gt;expiration_date&lt;/code&gt;. Also, it
is recommended to associate the token to routes that are indeed refering to the user (either as
a route identifier or as a concrete parameter of the request). Thereby, the server can check if
the token is matching the given user and prevent attacker from trying to send fake
request with a randomly generated token even if the chance of generating a random valid token
is more than insignifiant.&lt;/p&gt;

&lt;h3 id=&quot;which-one&quot;&gt;Which one?&lt;/h3&gt;

&lt;p&gt;Both strategies are equivalent to me. However, the second one allows the client to transfer only
one piece of information which could seemly be placed in the &lt;code&gt;Authorization&lt;/code&gt; HTTP header.
Furthermore, this makes sense as this header was initially dedicated to that purpose.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Having a RESTful API requires some constraints and standards to adopt. Also, the token’s
management is under the client responsability, meaning that if the client isn’t secure then the
app is compromised. Though, this isn’t inherent to that protocol. It would be the same with any
kind of authentication. This way of authentication and architecture gives nevertheless the
opportunity to build a completely stateless RESTful API - awesome.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_cookie#Drawbacks_of_cookies&quot;&gt;Drawbacks of Cookies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Guide_to_Authentication&quot;&gt;OWASP Guide to Authentication&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://aaronparecki.com/articles/2012/07/29/1/oauth2-simplified&quot;&gt;OAuth2 Simplified&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/549/the-definitive-guide-to-form-based-website-authentication&quot;&gt;SO: The Definitive Guide to Form Based Website Authentication&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.romainpellerin.eu/designing-an-efficient-rest-api.html&quot;&gt;Designing an Efficient Rest API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://restcookbook.com/Basics/loggingin/&quot;&gt;The Restful CookBook&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api&quot;&gt;Best Practices for Designing a Pragmatic RESTful API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jwt.io/&quot;&gt;JWT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 12 Nov 2015 18:08:57 +0100</pubDate>
        <link>http://ktorz.github.io/2015/11/12/rest_for_representational_state_transfer/</link>
        <guid isPermaLink="true">http://ktorz.github.io/2015/11/12/rest_for_representational_state_transfer/</guid>
        
        
      </item>
    
      <item>
        <title>Titanium, Alloy and ES6</title>
        <description>&lt;p&gt;ES6 is not only about syntactic sugars in your code, It also includes a lot of interesting
features and flow control tools like destructuring and promises. It makes functional
programming even more pleasant in JavaScript and thus we ought to use it with &lt;em&gt;Alloy&lt;/em&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;blockquote&gt;
  &lt;h5 id=&quot;edit-05th-november-2015&quot;&gt;EDIT 05th November 2015&lt;/h5&gt;
  &lt;p&gt;I’ve now created a Titanium plugin available as an npm package which makes the process way
more convenient to use: &lt;a href=&quot;https://www.npmjs.com/package/ti.es6&quot;&gt;ti.es6&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is already an existing solution that can be used for &lt;em&gt;Titanium&lt;/em&gt; classic apps:
&lt;a href=&quot;https://github.com/dawsontoth/ti.babel&quot;&gt;ti.babel&lt;/a&gt;. It is using, as I will do, the power of
&lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; to transcompile all &lt;em&gt;Titanium&lt;/em&gt; ES6 sources to a compatible ES5
version for the app. So, let’s dive into it and see how to make the thing works with &lt;em&gt;Alloy&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;

&lt;p&gt;First of all, we’ll need some artifacts but do not worry, &lt;code&gt;npm&lt;/code&gt; is as usual our devoted friend.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install -g babel browserify &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For the following, I’ve been working with &lt;em&gt;Alloy 1.7.x&lt;/em&gt; and &lt;em&gt;Titanium 5.0.x&lt;/em&gt;; nevertheless it
should work fine with any version. Also, you’ll need &lt;em&gt;Node.js&lt;/em&gt;, at least version 0.12.x (in
order to do synchronous &lt;code&gt;exec&lt;/code&gt;)&lt;/p&gt;

&lt;h3 id=&quot;create-destination-folder&quot;&gt;Create destination folder&lt;/h3&gt;

&lt;p&gt;Assuming we’re now in a &lt;em&gt;Titanium&lt;/em&gt; root project folder (the one that has the &lt;code&gt;tiapp.xml&lt;/code&gt; file).
In order to compile without disturbing the existing sources, we will ask &lt;em&gt;Babel&lt;/em&gt; to transcompile
the project &lt;code&gt;app/&lt;/code&gt; folder into a new one, let’s call it &lt;code&gt;.app/&lt;/code&gt; so it is hidden and nobody
cares about what is happening with this one. In that folder, add three folders &lt;code&gt;controllers&lt;/code&gt;
and &lt;code&gt;lib/babel&lt;/code&gt;. Then, put a blank file &lt;code&gt;index.js&lt;/code&gt; within the folder &lt;code&gt;controllers&lt;/code&gt; (this is the
minimum required by &lt;em&gt;Alloy&lt;/em&gt; to start the compilation).&lt;/p&gt;

&lt;p&gt;Then, we’ll need to use the lib &lt;em&gt;Polyfill&lt;/em&gt; packaged with &lt;em&gt;Babel&lt;/em&gt; to introduce some advanced
features to ES5.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;mkdir -p .app/controllers .app/lib/babel
touch .app/controllers/index.js
browserify &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;npm config get prefix&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/lib/node_modules/babel-core/polyfill.js -o
.app/lib/babel/polyfill.js&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Great, now, let’s create a little hook for &lt;em&gt;Alloy&lt;/em&gt; using an &lt;em&gt;alloy.jmk&lt;/em&gt; file. We’ll put a hook
before alloy compilation to transcompile all our original sources to something ES5-compatible.
So, create an &lt;code&gt;alloy.jmk&lt;/code&gt; and place it into the &lt;code&gt;.app&lt;/code&gt; folder with the following content:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;babel&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;child_process&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;execSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;pre:compile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babelSrc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ALLOY_APP_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/app&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alloy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;alloy.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Babel everything&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ALLOY_APP_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ALLOY_APP_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;app&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Transcompiling to ES5&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// First of all, erase previous compilation but index.js and cie.&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;find &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;home&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39; ! -name &amp;quot;alloy.jmk&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39; ! -path &amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;controllers&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;index.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39; ! -path &amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lib&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;babel&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;polyfill.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39; -type f -delete&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Remove empty folders&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;find &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;home&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; -empty -type d -delete&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// And copy the current app into the future app folder for Alloy&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cp -r &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babelSrc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Add a little line to alloy.js in order to include Polyfill&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alloy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;require(&amp;quot;babel/polyfill&amp;quot;);\n&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alloy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// And finally, transcompile with Babel&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;babel &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;home&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; --out-dir &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So, the &lt;em&gt;Titanium&lt;/em&gt; project now basically has this kind of structure:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;.
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--- app
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- alloy.js
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- controllers
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; -- index.js
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- models
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- views 
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--- .app
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- alloy.jmk
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- controllers
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; -- index.js
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;-- lib/babel/polyfill.js
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--- build
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--- i18n
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--- modules
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--- platform
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--- plugins
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--- Resources
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--- tiapp.xml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;do-the-trick&quot;&gt;Do the trick&lt;/h3&gt;

&lt;p&gt;Now, this is the tricky part. We need to make &lt;em&gt;Alloy&lt;/em&gt; think that the correct application folder
is &lt;code&gt;.app/&lt;/code&gt; and not &lt;code&gt;app/&lt;/code&gt;. To do so, we’ll need to edit &lt;em&gt;Alloy&lt;/em&gt;’s source files (we’ll see about
a Pull Request maybe?).&lt;/p&gt;

&lt;p&gt;Incidentally, everything could be easier and simplified if we were working in a separate
folder, using the &lt;em&gt;Alloy.jmk&lt;/em&gt; to copy and transcompile our source into the original &lt;code&gt;app/&lt;/code&gt;
folder. However in order to use all other &lt;em&gt;Alloy&lt;/em&gt; features like scaffolding and also to keep a
common folder architecture, those small hacks into &lt;em&gt;Alloy&lt;/em&gt; plugins are - to me - worth it.&lt;/p&gt;

&lt;p&gt;So, let’s find the &lt;em&gt;Alloy&lt;/em&gt; installation, usually &lt;code&gt;/usr/local/lib/node_modules/alloy/&lt;/code&gt; and open
the file &lt;code&gt;Alloy/commands/compile/index.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At the very beginning of the first exported function, you’ll need to add those lines (those
with a &lt;code&gt;+&lt;/code&gt; sign at the beginning):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//////////////////////////////////////&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;////////// command function //////////&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//////////////////////////////////////&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;BENCHMARK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alloyConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;compilerMakeFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAndValidateProjectPaths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;outputPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;restrictionPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ALLOY_APP_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ALLOY_APP_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’re almost done! Because &lt;em&gt;Alloy&lt;/em&gt; is a bit messy sometimes ^.^, there is another little
line to fix, around line &lt;code&gt;250&lt;/code&gt;, find the one that refers to &lt;code&gt;CONST.ALLOY_DIR&lt;/code&gt; and change it
for our &lt;code&gt;paths.app&lt;/code&gt; like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// Create collection of all widget and app paths&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;widgetDirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getWidgetDirectories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;viewCollection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;widgetDirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;viewCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ALLOY_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;viewCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Save it, and be ready to enjoy :)&lt;/p&gt;

&lt;h3 id=&quot;last-step&quot;&gt;Last step&lt;/h3&gt;

&lt;p&gt;Okay, last step, as you probably noticed, we’re refering to an environment variable
&lt;code&gt;ALLOY_APP_DIR&lt;/code&gt;, so, we’ll have to define that variable !&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ALLOY_APP_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.app&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;aaaaaaaaand… you’re done. You may want to add this export line to your &lt;code&gt;.bashrc&lt;/code&gt; or
&lt;code&gt;.bashprofile&lt;/code&gt; or whatever you’re using. Also, if you’re using a versionning system as &lt;code&gt;git&lt;/code&gt;,
make sure to correctly set up your &lt;code&gt;.gitignore&lt;/code&gt; to avoid the &lt;code&gt;.app&lt;/code&gt; folder (however be careful,
you still need the &lt;code&gt;index.js&lt;/code&gt;, &lt;code&gt;alloy.jmk&lt;/code&gt; and &lt;code&gt;polyfill.js&lt;/code&gt; in there !).&lt;/p&gt;

&lt;p&gt;Enjoy !&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Oct 2015 11:27:19 +0100</pubDate>
        <link>http://ktorz.github.io/2015/10/26/titanium,_alloy_and_es6/</link>
        <guid isPermaLink="true">http://ktorz.github.io/2015/10/26/titanium,_alloy_and_es6/</guid>
        
        
      </item>
    
      <item>
        <title>Expeditious guide to Git</title>
        <description>&lt;p&gt;Using Git is easy, you just have to add / commit / push and pull to keep the track of other changes.
Is it that simple? Let’s see how to use some basic features of Git in order to maintain a clear
and well-defined records.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This little guide acts more like a reminder of what I see today as good practices with Git. It
does not intend to be an introduction or a tutorial for people willing to learn how to use Git.&lt;/p&gt;

&lt;h3 id=&quot;commits&quot;&gt;Commits&lt;/h3&gt;

&lt;p&gt;There are already plenty of excellent article about how to write a commit message and how to do
a nice commit; thus I’ll keep this part straightforward. In the past, I used to make quite huge
commit with a quite huge message as well in order to describe the changes operated with that
commit. However, today, I would rather make very small commits that target only few changes.
There are simple reasons explaining that choice:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To commit often allows you to be more flexible. You can undo / redo a change more easily.&lt;/li&gt;
  &lt;li&gt;This is terrific for tracking bugs in the history.&lt;/li&gt;
  &lt;li&gt;Writing long commit messages is tedious and a bit complex.&lt;/li&gt;
  &lt;li&gt;Resolving conflicts in this way is also easier as commits usually impact less code.&lt;/li&gt;
  &lt;li&gt;When it comes to visualization tools (like GitHub for instance), this is way more readable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thereby, commit often and commit well. There are also two main schools about the form of a
commit message. Both agreed on the length - less than 70~80 characters.  Yet on the one hand,
some use verb in a past tense while on the other hand one would rather use an infinitive form.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Fixed typo in the main README file&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Fix typo in the main README file&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I find it more logical to use an infinitive form as a commit message
should describe what changes the commit is introducing (and not what changes have been
introduced). What should be clear is that a commit message should start with a verb, and be
lengthed 80 characters at maximum.&lt;/p&gt;

&lt;h3 id=&quot;merge-or-rebase-&quot;&gt;Merge or Rebase ?&lt;/h3&gt;

&lt;p&gt;Now talking about importing other changes in our index, the easy way will usually lead to
something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git pull origin mybranch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, this behavior corresponds to a &lt;code&gt;git fetch origin mybranch&lt;/code&gt; following by a &lt;code&gt;git merge
origin/mybranch&lt;/code&gt;. If there are changes in the remote repository it will result in a merge commit
with possible conflicts. Moreover, this log history will become uglier and uglier. In fact,
there is no real reason to have a merge commit here and most of the time, that commit does not
have any sense. Instead of that, when importing changes from a remote repository, I would
rather recommend to use Git rebase feature.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git fetch origin
git rebase origin mybranch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or simply:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git pull origin mybranch --rebase
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this way, the history remains clear and clean. Plus it is possible to add new commits that
are consistent with the current remote state. Merge commits are great to keep track of new
features implementation. Working in a separated branch, it is possible to merge back the
feature into the source branch. Having a merge commit in that case is relevant as it refers to
a moment where two different parts of the code that had diverged combined again. Also, when
several developers are working from a same common branch and wish to integrate their changes in
the same time, one will be able to merge easily, but the other may have to resolve conflicts and
create a merge commit. This makes sense because they both worked in the same time.&lt;/p&gt;

&lt;p&gt;Most of the time, I am never using &lt;code&gt;git pull&lt;/code&gt; but instead &lt;code&gt;git pull --ff-only&lt;/code&gt; for
&lt;em&gt;fast-forward only&lt;/em&gt;. This means that if Git is not able to import all changes directly without
having to do a merge commit, it will abort the process and let met see what should be done.
Then, depending on the situation, I will rebase my branch or nicely merge my changes into the
common branch. However, with a proper workflow, this will technically never happens.&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Oct 2015 11:00:58 +0200</pubDate>
        <link>http://ktorz.github.io/2015/10/07/expeditious_guide_to_git/</link>
        <guid isPermaLink="true">http://ktorz.github.io/2015/10/07/expeditious_guide_to_git/</guid>
        
        
      </item>
    
      <item>
        <title>Performance VS Modularity</title>
        <description>&lt;p&gt;One of the greatest features of &lt;strong&gt;Titanium&lt;/strong&gt; relies on its high modularity. The SDK can be easily
extended using modules, and when it comes to &lt;strong&gt;Alloy&lt;/strong&gt;, code can be split into several parts called
&lt;em&gt;widgets&lt;/em&gt;. However, what is the cost of using a &lt;em&gt;widget&lt;/em&gt;? What impact does a &lt;code&gt;require&lt;/code&gt; have on the
performance?&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;little-benchmark&quot;&gt;Little Benchmark&lt;/h3&gt;

&lt;p&gt;In order to test the cost of using a widget, we have ran some benchmark tests on different
devices (Samsung Galaxy S3, Archos Neon, LG D855, iPhone 4, iPhone 5s). Several
widget compositions have been created such that at the end, the result will constitute in a window
containing 10 labels.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;benchmark_10&lt;/strong&gt;: The reference one, this is a single widget containing 10 identical labels.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;benchmark_2x5&lt;/strong&gt;: This one is the above one split in two widgets, each of them containing 5
labels. So, there is 2 imports.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;benchmark_10x1&lt;/strong&gt;: Here, each label has been placed into a single widget; This result in 10
imports for Alloy.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;benchmark_5x1p5&lt;/strong&gt;: 5 labels are directly placed into the window, the other 5 one have been
placed into separated widget. 5 imports.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;benchmark_2x2x2p1&lt;/strong&gt;: This one aims at testing the impact of nested widgets. There are 2 widgets
containing 2 widgets and one label. Each of the latter 2 widgets contains also two widgets that
encapsulate a single label. Thus, there are 6 imports in total.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, what are we measuring exactly? The time it takes to create a widget from a controller.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;widget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Alloy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createWidget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;benchmark_xxx&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Ti&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We have ran the tests multiple times and took the average.
The first benchmark (&lt;em&gt;benchmark_10&lt;/em&gt;) is use a reference of the time it cost to create all 10 labels.
Therefore, what we are measuring is the deviation from this reference, weighted by the number of
widgets to require / create.&lt;/p&gt;

&lt;h3 id=&quot;results&quot;&gt;Results&lt;/h3&gt;
&lt;p&gt;Results are quite interesting and encouraging. For each device, the instantiation time is under
&lt;code&gt;1ms&lt;/code&gt; and under &lt;code&gt;350us&lt;/code&gt; for most of them (R.I.P iPhone 4…). Also, the more widgets are required,
the less it takes to require one of them. However, this seems not to be relevant enough and it’s probably due
to the fact that every widget is composed of the same Label element. Titanium or the device itself
might be able to process some sort of cache to speed up the view creation.&lt;/p&gt;

&lt;p&gt;Also, nesting widget seems to slow a bit the require time for any device. However.. Except for the
Archos which is definitely not a great warrior in this battle, the additional time might be ignored.&lt;/p&gt;

&lt;p&gt;Here are the results, (measure unit are micro seconds per widget):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Device&lt;/th&gt;
      &lt;th&gt;Benchmark_2x5&lt;/th&gt;
      &lt;th&gt;Benchmark_5x1p5&lt;/th&gt;
      &lt;th&gt;Benchmark_2x2x2p1&lt;/th&gt;
      &lt;th&gt;Benchmark_10x1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Archos Neon&lt;/td&gt;
      &lt;td&gt;619&lt;/td&gt;
      &lt;td&gt;589&lt;/td&gt;
      &lt;td&gt;818&lt;/td&gt;
      &lt;td&gt;485&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LG D855&lt;/td&gt;
      &lt;td&gt;619&lt;/td&gt;
      &lt;td&gt;366&lt;/td&gt;
      &lt;td&gt;380&lt;/td&gt;
      &lt;td&gt;337&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Galaxy S3&lt;/td&gt;
      &lt;td&gt;354&lt;/td&gt;
      &lt;td&gt;310&lt;/td&gt;
      &lt;td&gt;334&lt;/td&gt;
      &lt;td&gt;333&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iPhone 5s&lt;/td&gt;
      &lt;td&gt;313&lt;/td&gt;
      &lt;td&gt;270&lt;/td&gt;
      &lt;td&gt;289&lt;/td&gt;
      &lt;td&gt;263&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iPhone 4&lt;/td&gt;
      &lt;td&gt;776&lt;/td&gt;
      &lt;td&gt;946&lt;/td&gt;
      &lt;td&gt;962&lt;/td&gt;
      &lt;td&gt;937&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;bilan&quot;&gt;Bilan&lt;/h3&gt;
&lt;p&gt;The benchmarks (what a huge word for some measures of time) comfort us in the idea that the
readability and the high level of maintainability brought by a the modular architecture do not impact the
performance that much. When requiring about 50 different widgets, the overall cost brought by those
calls is less than &lt;code&gt;50ms&lt;/code&gt; and could be easily done on start-up. Component-driven development for
mobile application sounds even more promising.&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Jun 2015 10:01:25 +0200</pubDate>
        <link>http://ktorz.github.io/2015/06/27/performance_vs_modularity/</link>
        <guid isPermaLink="true">http://ktorz.github.io/2015/06/27/performance_vs_modularity/</guid>
        
        
      </item>
    
      <item>
        <title>Automated acceptance with Travis</title>
        <description>&lt;p&gt;When it comes to maintain or extend an existing mobile application, there is one thing you want to
ensure at any price: your changes should not break the existing working product. In other words, you
should avoid any kind of regression. This is what &lt;strong&gt;automated acceptance&lt;/strong&gt; stands for.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;test-things-before-its-too-late&quot;&gt;Test things before it’s too late&lt;/h2&gt;
&lt;p&gt;Nowadays and especially with framework like &lt;strong&gt;Titanium&lt;/strong&gt;, you can build an app really quickly - Even
making a coffee might be longer. However, as an app grows and becomes larger and larger, a
non-structured project might evolve into a complete mess where each new feature brings an additional
bug. Writing tests for an app, before everything goes out of control might be one of the prior
concern of a developer.&lt;/p&gt;

&lt;p&gt;Testing things is a well-known and experienced field of the computer
sciences; Fortunately for us, a lot of testing solutions exist for the mobile development, and
especially in the &lt;strong&gt;Titanium&lt;/strong&gt;’s world.&lt;/p&gt;

&lt;p&gt;I’ll not present existing testing solution here (&lt;em&gt;Jasmine&lt;/em&gt;, &lt;em&gt;Mocha&lt;/em&gt;, &lt;em&gt;Calabash&lt;/em&gt; and &lt;em&gt;Cucumber&lt;/em&gt; …); This is
likely to be the subject of a further topic. Nevertheless, whatever testing solution you have
adopted, being able to run tests automatically and generate reports for you about how it went is an
interesting feature.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/&quot;&gt;&lt;strong&gt;Travis&lt;/strong&gt;&lt;/a&gt; is an easy way to accomplish such a thing. It is probably the
most used automated acceptance tool alongside &lt;strong&gt;GitHub&lt;/strong&gt;. It performs automatic builds and test
runs after every push on a given &lt;strong&gt;GitHub&lt;/strong&gt; repository. Let’s see how we can setup &lt;strong&gt;Travis&lt;/strong&gt; for
our &lt;strong&gt;Titanium&lt;/strong&gt; applications.&lt;/p&gt;

&lt;h2 id=&quot;how-to-setup-an-automated-acceptance-process&quot;&gt;How to setup an automated acceptance process&lt;/h2&gt;
&lt;p&gt;After linking your &lt;strong&gt;GitHub&lt;/strong&gt; account with &lt;strong&gt;Travis&lt;/strong&gt;, the only thing required to make &lt;strong&gt;Travis&lt;/strong&gt; works is a
configuration &lt;em&gt;YML&lt;/em&gt; file, placed at your repository’s root. Right below is an example of a travis
file we used for our application.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;.travis.yml

    language: objective-c 

    env:
        matrix:
            - PLATFORM=&amp;quot;ios&amp;quot;
            - PLATFORM=&amp;quot;android&amp;quot; ANDROID_VERSION=&amp;quot;19&amp;quot;

    before_install:
        - export ANDROID_HOME=$PWD/android-sdk-macosx
        - export ANDROID_SDK=$ANDROID_HOME
        - export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools

    install:
        - npm install -g titanium alloy tishadow gulp ticalabash
        - npm install

        - titanium login travisci@appcelerator.com travisci
        - titanium sdk install latest --no-progress-bars

        - gulp &amp;#39;install:android_sdk&amp;#39;

    before_script:
        - gulp &amp;#39;start:emulator&amp;#39;
        - gulp &amp;#39;config:tiapp&amp;#39; --test

    script: 
        - gulp &amp;#39;test:calabash&amp;#39;
        - gulp &amp;#39;test:jasmine&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This configuration allow us to create two jobs on &lt;strong&gt;Travis&lt;/strong&gt;, one for &lt;em&gt;Android&lt;/em&gt; and the other one
for &lt;em&gt;iOS&lt;/em&gt;. A job is a set of tasks that are executed in a completly new virtual machine (VM).
Incidentally, each machine in &lt;strong&gt;Travis&lt;/strong&gt; comes with a set of existing tools like &lt;em&gt;rvm&lt;/em&gt; or &lt;em&gt;npm&lt;/em&gt;. 
Let’s dissect a bit that configuration file to understand what’s going on.&lt;/p&gt;

&lt;h3 id=&quot;prepare-the-environment&quot;&gt;Prepare the environment&lt;/h3&gt;
&lt;p&gt;As we will need to build for &lt;em&gt;iOS&lt;/em&gt;, we need to start a VM that runs on &lt;em&gt;Mac OS&lt;/em&gt;. This could be done
by telling &lt;strong&gt;Travis&lt;/strong&gt; to use &lt;code&gt;objective-c&lt;/code&gt; as a language.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;...
    language: objective-c
...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Also, it is possible to create separate
jobs by defining a &lt;code&gt;matrix&lt;/code&gt; of environment variables. Under the hood, &lt;code&gt;matrix&lt;/code&gt; definition in
&lt;strong&gt;Travis&lt;/strong&gt; are really powerful (a way more powerful that we are currently doing). The next lines
tell &lt;strong&gt;Travis&lt;/strong&gt; to create two jobs for which the given environment variables will be available.
Then, we are gonna use those variables in several scripts, but it does not make any sense for
&lt;strong&gt;Travis&lt;/strong&gt; itself. By the by, &lt;strong&gt;Travis&lt;/strong&gt; configuration files could be split into several sections
(&lt;code&gt;before_install&lt;/code&gt;, &lt;code&gt;install&lt;/code&gt;, &lt;code&gt;before_script&lt;/code&gt;, &lt;code&gt;script&lt;/code&gt;, &lt;code&gt;before_deploy&lt;/code&gt;, &lt;code&gt;deploy&lt;/code&gt;, &lt;code&gt;after_success&lt;/code&gt; …)
Those sections have different meanings and for most of them it doesn’t change a thing to your build
process. This is rather a semantic consideration. If something goes wrong in the sections
&lt;code&gt;before_install&lt;/code&gt;, &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;before_script&lt;/code&gt;, your build will be considered as &lt;em&gt;errored&lt;/em&gt;. If something
goes wrong in the &lt;code&gt;script&lt;/code&gt; section, it will rather be considered as &lt;em&gt;failed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As a matter of fact, those sections might be used to perform bash commands. A common thing to do is
to call some scripts or tasks runner commands to perform a more complex action.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;...
    env:
        matrix:
            - PLATFORM=&amp;quot;ios&amp;quot;
            - PLATFORM=&amp;quot;android&amp;quot; ANDROID_VERSION=&amp;quot;19&amp;quot;

    before_install:
        - export ANDROID_HOME=$PWD/android-sdk-macosx
        - export ANDROID_SDK=$ANDROID_HOME
        - export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools
... &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;set-up-titanium-and-your-test-environment&quot;&gt;Set up Titanium and your test environment&lt;/h3&gt;
&lt;p&gt;To be able to build a &lt;strong&gt;Titanium&lt;/strong&gt; app, it has to be installed on the VM, obviously. Fortunatly, the
node package manager is accessible and then, all the installation could be done the following way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;...
    install:
        - npm install -g titanium alloy tishadow gulp ticalabash
        - npm install

        - titanium login travisci@appcelerator.com travisci
        - titanium sdk install latest --no-progress-bars

        - gulp &amp;#39;install:android_sdk&amp;#39;
...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to use the &lt;strong&gt;Titanium&lt;/strong&gt; cli, it is also required to login. As you don’t want to put your
credentials on a public repository, you can just use those available for that purpose!&lt;/p&gt;

&lt;p&gt;Moreover, in our case, we are also installing some other tools with &lt;strong&gt;Titanium&lt;/strong&gt;. Notably &lt;strong&gt;Gulp&lt;/strong&gt;
which is a &lt;em&gt;JavaScript&lt;/em&gt; task runner that will handle builds and tests. You may find interesting
tasks in our &lt;em&gt;boilerplate&lt;/em&gt; project right
&lt;a href=&quot;https://github.com/TheSmiths/ts.boilerplate/tree/master/project_files/.gulp&quot;&gt;here&lt;/a&gt;. Most of them
could easily be written using another task runner (such as &lt;em&gt;Grunt&lt;/em&gt; or &lt;em&gt;Rake&lt;/em&gt;) or simply written in
some bash scripts. I’ll not dive into those tasks as they have been written to fit our needs, and as I
said, it will be the topic of another blog post.&lt;/p&gt;

&lt;h2 id=&quot;watch-your-results&quot;&gt;Watch your results&lt;/h2&gt;

&lt;p&gt;With your &lt;code&gt;.travis.yml&lt;/code&gt; configuration file set up, &lt;strong&gt;Travis&lt;/strong&gt; will be able to set up jobs for every
push you perform on &lt;strong&gt;GitHub&lt;/strong&gt;. It also gives you any output to the console of any executed command.
Then, it’s up to you to look at those results and pieces of information; You can also configure &lt;strong&gt;Travis&lt;/strong&gt; to
send you an email after a build to tell you about the results.&lt;/p&gt;

&lt;p&gt;Also, it is nice to put the information directly on &lt;strong&gt;GitHub&lt;/strong&gt; using a small badge &lt;img src=&quot;https://api.travis-ci.org/TheSmiths-Widgets/ts.blurryview.svg&quot; alt=&quot;Travis&quot; /&gt;. In that way,
other developers might know that what they are looking at is something that compiles and pass some
tests!&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Jun 2015 11:40:02 +0200</pubDate>
        <link>http://ktorz.github.io/2015/06/21/automated_acceptance_with_travis/</link>
        <guid isPermaLink="true">http://ktorz.github.io/2015/06/21/automated_acceptance_with_travis/</guid>
        
        
      </item>
    
      <item>
        <title>How to Know a Radius While Drawing a Circle on Google Maps</title>
        <description>&lt;p&gt;Complete answer and challenge to
&lt;a href=&quot;http://stackoverflow.com/questions/30368231/how-to-know-radius-while-drawing-a-circle-on-google-maps&quot;&gt;a StackOverflow question&lt;/a&gt; upon the Google Maps API.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;A nice challenge indeed. As @DaveAlperovich has commented, the &lt;code&gt;DrawingManager&lt;/code&gt; can’t be used to retrieve this piece of information; While drawing, there is no access to the circle; We have to wait for the &lt;code&gt;DrawingManager&lt;/code&gt; to trigger the &lt;code&gt;circlecomplete&lt;/code&gt; event to get a reference to this circle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nevertheless&lt;/strong&gt;, if you can’t have a real manager, &lt;em&gt;just fake it&lt;/em&gt;.
See the final result on &lt;a href=&quot;http://jsfiddle.net/KtorZ/kejks9dg/1/&quot;&gt;JSFiddle&lt;/a&gt; and the description right below.&lt;/p&gt;

&lt;p&gt;###Step 1: Create a custom control
Somewhere in the file or as an external library:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FakeDrawer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controlDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   
    &lt;span class=&quot;cm&quot;&gt;/* Initialization, some styling ... */&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initControls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controlDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;FakeDrawer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initControls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controlDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createControlUI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controlUI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* ... See the snippet for details .. just some styling */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controlUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_controls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createControlUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Draw a circle&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;circle&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createControlUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Stop drawing&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;openhand&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

     &lt;span class=&quot;nx&quot;&gt;controlDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;controlDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;step-2-add-some-sugars&quot;&gt;Step 2: Add some sugars&lt;/h3&gt;
&lt;p&gt;This are functions that we may use; Highly inspired from your JsFiddle :)&lt;/p&gt;

&lt;p&gt;A reset method to recover a consistent state when needed:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;FakeDrawer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;draggableCursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;draggable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* Remove any applied listener */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_drawListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_drawListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And, a distance computer:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;FakeDrawer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;distanceBetweenPoints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6371&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dLat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dLon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dLat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dLat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dLon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dLon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;atan2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;step-3-create-your-own-drawing-mode&quot;&gt;Step 3: Create your own drawing mode&lt;/h3&gt;
&lt;p&gt;Now that we have some controls, we have to define their behavior. The &lt;code&gt;stop&lt;/code&gt; control is straightforward; Let’s have a look to the &lt;code&gt;circle&lt;/code&gt; control.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;FakeDrawer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;drawingMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* Let&amp;#39;s freeze the map during drawing */&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;draggable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Create a new circle which will be manually scaled */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;fillColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;#000&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;fillOpacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;strokeWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;clickable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;editable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;latLng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;zIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Update the radius on each mouse move */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onMouseMove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;mousemove&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;distanceBetweenPoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;latLng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;latLng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRadius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;cm&quot;&gt;/* Here is the feature, know the radius while drawing */&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;drawing_radius_changed&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* The user has finished its drawing */&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addListenerOnce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mouseup&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* Remove all listeners as they are no more required */&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onMouseMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setEditable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;cm&quot;&gt;/* Restore some options to keep a consistent behavior */&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;cm&quot;&gt;/* Notify listener with the final circle */&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;circlecomplete&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;###Step 4: Bind controls
Now that everything is okay, let’s add some listeners to the initial version of the constructor so that each control has a corresponding action when clicked.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FakeDrawer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controlDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/* Initialization, some styling ... */&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initControls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controlDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* Setup the click event listeners: drawingmode */&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addDomListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* Ensure consistency */&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Only drawingmode */&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;draggableCursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;crosshair&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_drawListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;mousedown&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;drawingMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addDomListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;###Step 5: Use it!
Assuming that your map has been initialized correctly.&lt;/p&gt;

&lt;p&gt;Inside your map init function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeDrawerDiv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeDrawer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FakeDrawer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fakeDrawerDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fakeDrawerDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ControlPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TOP_CENTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fakeDrawerDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;info&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Radius: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getRadius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fakeDrawer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;drawing_radius_changed&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fakeDrawer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;circlecomplete&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;radius_changed&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;updateInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Enjoy, hope it will help.&lt;/p&gt;
</description>
        <pubDate>Fri, 29 May 2015 02:00:00 +0200</pubDate>
        <link>http://ktorz.github.io/2015/05/29/how_to_know_a_radius_while_drawing_a_circle_on_google_maps/</link>
        <guid isPermaLink="true">http://ktorz.github.io/2015/05/29/how_to_know_a_radius_while_drawing_a_circle_on_google_maps/</guid>
        
        
      </item>
    
  </channel>
</rss>
